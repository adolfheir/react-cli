// source: PreprocessDataSvc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.PreprocessDataSvc.ListPreprocessDataRequest', null, global);
goog.exportSymbol('proto.PreprocessDataSvc.ListPreprocessDataResponse', null, global);
goog.exportSymbol('proto.PreprocessDataSvc.PreprocessDataItem', null, global);
goog.exportSymbol('proto.PreprocessDataSvc.SubscribePreprocessDataRequest', null, global);
goog.exportSymbol('proto.PreprocessDataSvc.SubscribePreprocessDataResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PreprocessDataSvc.PreprocessDataItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PreprocessDataSvc.PreprocessDataItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PreprocessDataSvc.PreprocessDataItem.displayName = 'proto.PreprocessDataSvc.PreprocessDataItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PreprocessDataSvc.SubscribePreprocessDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PreprocessDataSvc.SubscribePreprocessDataRequest.displayName = 'proto.PreprocessDataSvc.SubscribePreprocessDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PreprocessDataSvc.SubscribePreprocessDataResponse.repeatedFields_, null);
};
goog.inherits(proto.PreprocessDataSvc.SubscribePreprocessDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PreprocessDataSvc.SubscribePreprocessDataResponse.displayName = 'proto.PreprocessDataSvc.SubscribePreprocessDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PreprocessDataSvc.ListPreprocessDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PreprocessDataSvc.ListPreprocessDataRequest.displayName = 'proto.PreprocessDataSvc.ListPreprocessDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PreprocessDataSvc.ListPreprocessDataResponse.repeatedFields_, null);
};
goog.inherits(proto.PreprocessDataSvc.ListPreprocessDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PreprocessDataSvc.ListPreprocessDataResponse.displayName = 'proto.PreprocessDataSvc.ListPreprocessDataResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.toObject = function(opt_includeInstance) {
  return proto.PreprocessDataSvc.PreprocessDataItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PreprocessDataSvc.PreprocessDataItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.PreprocessDataItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    objectType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    imageKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    objectDetectionRect: (f = msg.getObjectDetectionRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    expansionOdRect: (f = msg.getExpansionOdRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    frameInfo: (f = msg.getFrameInfo()) && common_pb.FrameExtendInfo.toObject(includeInstance, f),
    featureId: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem}
 */
proto.PreprocessDataSvc.PreprocessDataItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PreprocessDataSvc.PreprocessDataItem;
  return proto.PreprocessDataSvc.PreprocessDataItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PreprocessDataSvc.PreprocessDataItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem}
 */
proto.PreprocessDataSvc.PreprocessDataItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!proto.Common.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageKey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 6:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setObjectDetectionRect(value);
      break;
    case 7:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setExpansionOdRect(value);
      break;
    case 8:
      var value = new common_pb.FrameExtendInfo;
      reader.readMessage(value,common_pb.FrameExtendInfo.deserializeBinaryFromReader);
      msg.setFrameInfo(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeatureId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PreprocessDataSvc.PreprocessDataItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PreprocessDataSvc.PreprocessDataItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.PreprocessDataItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getImageKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getObjectDetectionRect();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getExpansionOdRect();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getFrameInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_pb.FrameExtendInfo.serializeBinaryToWriter
    );
  }
  f = message.getFeatureId();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Common.ObjectType object_type = 3;
 * @return {!proto.Common.ObjectType}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getObjectType = function() {
  return /** @type {!proto.Common.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Common.ObjectType} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string image_key = 4;
 * @return {string}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getImageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setImageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float confidence = 5;
 * @return {number}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional Common.Rect2F object_detection_rect = 6;
 * @return {?proto.Common.Rect2F}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getObjectDetectionRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 6));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
*/
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setObjectDetectionRect = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.clearObjectDetectionRect = function() {
  return this.setObjectDetectionRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.hasObjectDetectionRect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Common.Rect2F expansion_od_rect = 7;
 * @return {?proto.Common.Rect2F}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getExpansionOdRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 7));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
*/
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setExpansionOdRect = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.clearExpansionOdRect = function() {
  return this.setExpansionOdRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.hasExpansionOdRect = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Common.FrameExtendInfo frame_info = 8;
 * @return {?proto.Common.FrameExtendInfo}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getFrameInfo = function() {
  return /** @type{?proto.Common.FrameExtendInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.FrameExtendInfo, 8));
};


/**
 * @param {?proto.Common.FrameExtendInfo|undefined} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
*/
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setFrameInfo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.clearFrameInfo = function() {
  return this.setFrameInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.hasFrameInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 feature_id = 9;
 * @return {number}
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.getFeatureId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem} returns this
 */
proto.PreprocessDataSvc.PreprocessDataItem.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PreprocessDataSvc.SubscribePreprocessDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PreprocessDataSvc.SubscribePreprocessDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    preprocessId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataRequest}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PreprocessDataSvc.SubscribePreprocessDataRequest;
  return proto.PreprocessDataSvc.SubscribePreprocessDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PreprocessDataSvc.SubscribePreprocessDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataRequest}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreprocessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PreprocessDataSvc.SubscribePreprocessDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PreprocessDataSvc.SubscribePreprocessDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreprocessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string preprocess_id = 1;
 * @return {string}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.prototype.getPreprocessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.SubscribePreprocessDataRequest.prototype.setPreprocessId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PreprocessDataSvc.SubscribePreprocessDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    preprocessId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.PreprocessDataSvc.PreprocessDataItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PreprocessDataSvc.SubscribePreprocessDataResponse;
  return proto.PreprocessDataSvc.SubscribePreprocessDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreprocessId(value);
      break;
    case 4:
      var value = new proto.PreprocessDataSvc.PreprocessDataItem;
      reader.readMessage(value,proto.PreprocessDataSvc.PreprocessDataItem.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PreprocessDataSvc.SubscribePreprocessDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getPreprocessId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.PreprocessDataSvc.PreprocessDataItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} returns this
*/
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string preprocess_id = 3;
 * @return {string}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.getPreprocessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.setPreprocessId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated PreprocessDataItem item = 4;
 * @return {!Array<!proto.PreprocessDataSvc.PreprocessDataItem>}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.getItemList = function() {
  return /** @type{!Array<!proto.PreprocessDataSvc.PreprocessDataItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PreprocessDataSvc.PreprocessDataItem, 4));
};


/**
 * @param {!Array<!proto.PreprocessDataSvc.PreprocessDataItem>} value
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} returns this
*/
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.setItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.PreprocessDataSvc.PreprocessDataItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem}
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.PreprocessDataSvc.PreprocessDataItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PreprocessDataSvc.SubscribePreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.SubscribePreprocessDataResponse.prototype.clearItemList = function() {
  return this.setItemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PreprocessDataSvc.ListPreprocessDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PreprocessDataSvc.ListPreprocessDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    preprocessId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    objectType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxResults: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PreprocessDataSvc.ListPreprocessDataRequest;
  return proto.PreprocessDataSvc.ListPreprocessDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PreprocessDataSvc.ListPreprocessDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreprocessId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTimestamp(value);
      break;
    case 4:
      var value = /** @type {!proto.Common.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PreprocessDataSvc.ListPreprocessDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PreprocessDataSvc.ListPreprocessDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreprocessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEndTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string preprocess_id = 1;
 * @return {string}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.getPreprocessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.setPreprocessId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 start_timestamp = 2;
 * @return {number}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.getStartTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.setStartTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 end_timestamp = 3;
 * @return {number}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.getEndTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.setEndTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Common.ObjectType object_type = 4;
 * @return {!proto.Common.ObjectType}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.getObjectType = function() {
  return /** @type {!proto.Common.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Common.ObjectType} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.setObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 max_results = 5;
 * @return {number}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.setMaxResults = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string next_token = 6;
 * @return {string}
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataRequest} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataRequest.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PreprocessDataSvc.ListPreprocessDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PreprocessDataSvc.ListPreprocessDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.PreprocessDataSvc.PreprocessDataItem.toObject, includeInstance),
    nextToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    totalCount: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PreprocessDataSvc.ListPreprocessDataResponse;
  return proto.PreprocessDataSvc.ListPreprocessDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PreprocessDataSvc.ListPreprocessDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.PreprocessDataSvc.PreprocessDataItem;
      reader.readMessage(value,proto.PreprocessDataSvc.PreprocessDataItem.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PreprocessDataSvc.ListPreprocessDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PreprocessDataSvc.ListPreprocessDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PreprocessDataSvc.PreprocessDataItem.serializeBinaryToWriter
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
*/
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PreprocessDataItem item = 3;
 * @return {!Array<!proto.PreprocessDataSvc.PreprocessDataItem>}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.getItemList = function() {
  return /** @type{!Array<!proto.PreprocessDataSvc.PreprocessDataItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PreprocessDataSvc.PreprocessDataItem, 3));
};


/**
 * @param {!Array<!proto.PreprocessDataSvc.PreprocessDataItem>} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
*/
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.setItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PreprocessDataSvc.PreprocessDataItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PreprocessDataSvc.PreprocessDataItem}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PreprocessDataSvc.PreprocessDataItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.clearItemList = function() {
  return this.setItemList([]);
};


/**
 * optional string next_token = 4;
 * @return {string}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 total_count = 5;
 * @return {number}
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PreprocessDataSvc.ListPreprocessDataResponse} returns this
 */
proto.PreprocessDataSvc.ListPreprocessDataResponse.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.PreprocessDataSvc);
