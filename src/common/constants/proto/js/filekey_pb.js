// source: filekey.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Filekey.FileKey', null, global);
goog.exportSymbol('proto.Filekey.FileType', null, global);
goog.exportSymbol('proto.Filekey.ObjectFileKey', null, global);
goog.exportSymbol('proto.Filekey.ObjectRealtimeFileKey', null, global);
goog.exportSymbol('proto.Filekey.SearchObjectType', null, global);
goog.exportSymbol('proto.Filekey.ThumbnailFileKey', null, global);
goog.exportSymbol('proto.Filekey.VideoFileKey', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filekey.ObjectFileKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Filekey.ObjectFileKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Filekey.ObjectFileKey.displayName = 'proto.Filekey.ObjectFileKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filekey.ObjectRealtimeFileKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Filekey.ObjectRealtimeFileKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Filekey.ObjectRealtimeFileKey.displayName = 'proto.Filekey.ObjectRealtimeFileKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filekey.ThumbnailFileKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Filekey.ThumbnailFileKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Filekey.ThumbnailFileKey.displayName = 'proto.Filekey.ThumbnailFileKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filekey.VideoFileKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Filekey.VideoFileKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Filekey.VideoFileKey.displayName = 'proto.Filekey.VideoFileKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filekey.FileKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Filekey.FileKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Filekey.FileKey.displayName = 'proto.Filekey.FileKey';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Filekey.ObjectFileKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Filekey.ObjectFileKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Filekey.ObjectFileKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.ObjectFileKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskFolder: jspb.Message.getFieldWithDefault(msg, 1, ""),
    searchObjectType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    key: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filekey.ObjectFileKey}
 */
proto.Filekey.ObjectFileKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filekey.ObjectFileKey;
  return proto.Filekey.ObjectFileKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filekey.ObjectFileKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filekey.ObjectFileKey}
 */
proto.Filekey.ObjectFileKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskFolder(value);
      break;
    case 2:
      var value = /** @type {!proto.Filekey.SearchObjectType} */ (reader.readEnum());
      msg.setSearchObjectType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filekey.ObjectFileKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filekey.ObjectFileKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filekey.ObjectFileKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.ObjectFileKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskFolder();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSearchObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string task_folder = 1;
 * @return {string}
 */
proto.Filekey.ObjectFileKey.prototype.getTaskFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filekey.ObjectFileKey} returns this
 */
proto.Filekey.ObjectFileKey.prototype.setTaskFolder = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SearchObjectType search_object_type = 2;
 * @return {!proto.Filekey.SearchObjectType}
 */
proto.Filekey.ObjectFileKey.prototype.getSearchObjectType = function() {
  return /** @type {!proto.Filekey.SearchObjectType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Filekey.SearchObjectType} value
 * @return {!proto.Filekey.ObjectFileKey} returns this
 */
proto.Filekey.ObjectFileKey.prototype.setSearchObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.Filekey.ObjectFileKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filekey.ObjectFileKey} returns this
 */
proto.Filekey.ObjectFileKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Filekey.ObjectRealtimeFileKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Filekey.ObjectRealtimeFileKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Filekey.ObjectRealtimeFileKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.ObjectRealtimeFileKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnFamily: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filekey.ObjectRealtimeFileKey}
 */
proto.Filekey.ObjectRealtimeFileKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filekey.ObjectRealtimeFileKey;
  return proto.Filekey.ObjectRealtimeFileKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filekey.ObjectRealtimeFileKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filekey.ObjectRealtimeFileKey}
 */
proto.Filekey.ObjectRealtimeFileKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnFamily(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filekey.ObjectRealtimeFileKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filekey.ObjectRealtimeFileKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filekey.ObjectRealtimeFileKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.ObjectRealtimeFileKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnFamily();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string column_family = 1;
 * @return {string}
 */
proto.Filekey.ObjectRealtimeFileKey.prototype.getColumnFamily = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filekey.ObjectRealtimeFileKey} returns this
 */
proto.Filekey.ObjectRealtimeFileKey.prototype.setColumnFamily = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.Filekey.ObjectRealtimeFileKey.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filekey.ObjectRealtimeFileKey} returns this
 */
proto.Filekey.ObjectRealtimeFileKey.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Filekey.ThumbnailFileKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Filekey.ThumbnailFileKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Filekey.ThumbnailFileKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.ThumbnailFileKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    filePath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filekey.ThumbnailFileKey}
 */
proto.Filekey.ThumbnailFileKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filekey.ThumbnailFileKey;
  return proto.Filekey.ThumbnailFileKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filekey.ThumbnailFileKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filekey.ThumbnailFileKey}
 */
proto.Filekey.ThumbnailFileKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filekey.ThumbnailFileKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filekey.ThumbnailFileKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filekey.ThumbnailFileKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.ThumbnailFileKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_path = 1;
 * @return {string}
 */
proto.Filekey.ThumbnailFileKey.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filekey.ThumbnailFileKey} returns this
 */
proto.Filekey.ThumbnailFileKey.prototype.setFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Filekey.VideoFileKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Filekey.VideoFileKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Filekey.VideoFileKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.VideoFileKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    filePath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filekey.VideoFileKey}
 */
proto.Filekey.VideoFileKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filekey.VideoFileKey;
  return proto.Filekey.VideoFileKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filekey.VideoFileKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filekey.VideoFileKey}
 */
proto.Filekey.VideoFileKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filekey.VideoFileKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filekey.VideoFileKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filekey.VideoFileKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.VideoFileKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_path = 1;
 * @return {string}
 */
proto.Filekey.VideoFileKey.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filekey.VideoFileKey} returns this
 */
proto.Filekey.VideoFileKey.prototype.setFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Filekey.FileKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Filekey.FileKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Filekey.FileKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.FileKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    object: (f = msg.getObject()) && proto.Filekey.ObjectFileKey.toObject(includeInstance, f),
    thumbnail: (f = msg.getThumbnail()) && proto.Filekey.ThumbnailFileKey.toObject(includeInstance, f),
    video: (f = msg.getVideo()) && proto.Filekey.VideoFileKey.toObject(includeInstance, f),
    realtimeObject: (f = msg.getRealtimeObject()) && proto.Filekey.ObjectRealtimeFileKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filekey.FileKey}
 */
proto.Filekey.FileKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filekey.FileKey;
  return proto.Filekey.FileKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filekey.FileKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filekey.FileKey}
 */
proto.Filekey.FileKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Filekey.FileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Filekey.ObjectFileKey;
      reader.readMessage(value,proto.Filekey.ObjectFileKey.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 3:
      var value = new proto.Filekey.ThumbnailFileKey;
      reader.readMessage(value,proto.Filekey.ThumbnailFileKey.deserializeBinaryFromReader);
      msg.setThumbnail(value);
      break;
    case 4:
      var value = new proto.Filekey.VideoFileKey;
      reader.readMessage(value,proto.Filekey.VideoFileKey.deserializeBinaryFromReader);
      msg.setVideo(value);
      break;
    case 5:
      var value = new proto.Filekey.ObjectRealtimeFileKey;
      reader.readMessage(value,proto.Filekey.ObjectRealtimeFileKey.deserializeBinaryFromReader);
      msg.setRealtimeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filekey.FileKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filekey.FileKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filekey.FileKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filekey.FileKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Filekey.ObjectFileKey.serializeBinaryToWriter
    );
  }
  f = message.getThumbnail();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Filekey.ThumbnailFileKey.serializeBinaryToWriter
    );
  }
  f = message.getVideo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Filekey.VideoFileKey.serializeBinaryToWriter
    );
  }
  f = message.getRealtimeObject();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Filekey.ObjectRealtimeFileKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional FileType type = 1;
 * @return {!proto.Filekey.FileType}
 */
proto.Filekey.FileKey.prototype.getType = function() {
  return /** @type {!proto.Filekey.FileType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Filekey.FileType} value
 * @return {!proto.Filekey.FileKey} returns this
 */
proto.Filekey.FileKey.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ObjectFileKey object = 2;
 * @return {?proto.Filekey.ObjectFileKey}
 */
proto.Filekey.FileKey.prototype.getObject = function() {
  return /** @type{?proto.Filekey.ObjectFileKey} */ (
    jspb.Message.getWrapperField(this, proto.Filekey.ObjectFileKey, 2));
};


/**
 * @param {?proto.Filekey.ObjectFileKey|undefined} value
 * @return {!proto.Filekey.FileKey} returns this
*/
proto.Filekey.FileKey.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Filekey.FileKey} returns this
 */
proto.Filekey.FileKey.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Filekey.FileKey.prototype.hasObject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ThumbnailFileKey thumbnail = 3;
 * @return {?proto.Filekey.ThumbnailFileKey}
 */
proto.Filekey.FileKey.prototype.getThumbnail = function() {
  return /** @type{?proto.Filekey.ThumbnailFileKey} */ (
    jspb.Message.getWrapperField(this, proto.Filekey.ThumbnailFileKey, 3));
};


/**
 * @param {?proto.Filekey.ThumbnailFileKey|undefined} value
 * @return {!proto.Filekey.FileKey} returns this
*/
proto.Filekey.FileKey.prototype.setThumbnail = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Filekey.FileKey} returns this
 */
proto.Filekey.FileKey.prototype.clearThumbnail = function() {
  return this.setThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Filekey.FileKey.prototype.hasThumbnail = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VideoFileKey video = 4;
 * @return {?proto.Filekey.VideoFileKey}
 */
proto.Filekey.FileKey.prototype.getVideo = function() {
  return /** @type{?proto.Filekey.VideoFileKey} */ (
    jspb.Message.getWrapperField(this, proto.Filekey.VideoFileKey, 4));
};


/**
 * @param {?proto.Filekey.VideoFileKey|undefined} value
 * @return {!proto.Filekey.FileKey} returns this
*/
proto.Filekey.FileKey.prototype.setVideo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Filekey.FileKey} returns this
 */
proto.Filekey.FileKey.prototype.clearVideo = function() {
  return this.setVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Filekey.FileKey.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ObjectRealtimeFileKey realtime_object = 5;
 * @return {?proto.Filekey.ObjectRealtimeFileKey}
 */
proto.Filekey.FileKey.prototype.getRealtimeObject = function() {
  return /** @type{?proto.Filekey.ObjectRealtimeFileKey} */ (
    jspb.Message.getWrapperField(this, proto.Filekey.ObjectRealtimeFileKey, 5));
};


/**
 * @param {?proto.Filekey.ObjectRealtimeFileKey|undefined} value
 * @return {!proto.Filekey.FileKey} returns this
*/
proto.Filekey.FileKey.prototype.setRealtimeObject = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Filekey.FileKey} returns this
 */
proto.Filekey.FileKey.prototype.clearRealtimeObject = function() {
  return this.setRealtimeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Filekey.FileKey.prototype.hasRealtimeObject = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.Filekey.SearchObjectType = {
  SEARCHOBJECTTYPE_PEOPLE: 0,
  SEARCHOBJECTTYPE_CAR: 1,
  SEARCHOBJECTTYPE_BIKE: 2,
  SEARCHOBJECTTYPE_ALL: 3
};

/**
 * @enum {number}
 */
proto.Filekey.FileType = {
  FILETYPE_OBJECT: 0,
  FILETYPE_THUMBNAIL: 1,
  FILETYPE_VIDEO: 2
};

goog.object.extend(exports, proto.Filekey);
