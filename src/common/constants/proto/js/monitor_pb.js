// source: monitor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ObjectGroup_pb = require('./ObjectGroup_pb.js');
goog.object.extend(proto, ObjectGroup_pb);
goog.exportSymbol('proto.Monitor.CameraStatistics', null, global);
goog.exportSymbol('proto.Monitor.CameraSuspectCount', null, global);
goog.exportSymbol('proto.Monitor.ChangeNotification', null, global);
goog.exportSymbol('proto.Monitor.CreateMonitorRequest', null, global);
goog.exportSymbol('proto.Monitor.CreateMonitorResponse', null, global);
goog.exportSymbol('proto.Monitor.DeleteMonitorRequest', null, global);
goog.exportSymbol('proto.Monitor.DeleteMonitorResponse', null, global);
goog.exportSymbol('proto.Monitor.DescribeMonitorRequest', null, global);
goog.exportSymbol('proto.Monitor.DescribeMonitorResponse', null, global);
goog.exportSymbol('proto.Monitor.GetCameraResultCountAllRequest', null, global);
goog.exportSymbol('proto.Monitor.GetCameraResultCountAllResponse', null, global);
goog.exportSymbol('proto.Monitor.GetCameraStatisticsRequest', null, global);
goog.exportSymbol('proto.Monitor.GetCameraStatisticsResponse', null, global);
goog.exportSymbol('proto.Monitor.GetResultCountRequest', null, global);
goog.exportSymbol('proto.Monitor.GetResultCountResponse', null, global);
goog.exportSymbol('proto.Monitor.ListMonitorResultsRequest', null, global);
goog.exportSymbol('proto.Monitor.ListMonitorResultsResponse', null, global);
goog.exportSymbol('proto.Monitor.ListMonitorsByCameraRequest', null, global);
goog.exportSymbol('proto.Monitor.ListMonitorsByCameraResponse', null, global);
goog.exportSymbol('proto.Monitor.ListMonitorsRequest', null, global);
goog.exportSymbol('proto.Monitor.ListMonitorsResponse', null, global);
goog.exportSymbol('proto.Monitor.ModifyMonitorRequest', null, global);
goog.exportSymbol('proto.Monitor.ModifyMonitorResponse', null, global);
goog.exportSymbol('proto.Monitor.Monitor', null, global);
goog.exportSymbol('proto.Monitor.MonitorCamera', null, global);
goog.exportSymbol('proto.Monitor.MonitorResult', null, global);
goog.exportSymbol('proto.Monitor.MonitorResultStatus', null, global);
goog.exportSymbol('proto.Monitor.MonitorResultTotal', null, global);
goog.exportSymbol('proto.Monitor.MonitorStatus', null, global);
goog.exportSymbol('proto.Monitor.ProcessMonitorResultRequest', null, global);
goog.exportSymbol('proto.Monitor.ProcessMonitorResultResponse', null, global);
goog.exportSymbol('proto.Monitor.StartMonitorRequest', null, global);
goog.exportSymbol('proto.Monitor.StartMonitorResponse', null, global);
goog.exportSymbol('proto.Monitor.StopMonitorRequest', null, global);
goog.exportSymbol('proto.Monitor.StopMonitorResponse', null, global);
goog.exportSymbol('proto.Monitor.SubscribeMonitorObjectChangeRequest', null, global);
goog.exportSymbol('proto.Monitor.SubscribeMonitorObjectChangeResponse', null, global);
goog.exportSymbol('proto.Monitor.SubscribeMonitorResultsRequest', null, global);
goog.exportSymbol('proto.Monitor.SubscribeMonitorResultsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.Monitor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.Monitor.repeatedFields_, null);
};
goog.inherits(proto.Monitor.Monitor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.Monitor.displayName = 'proto.Monitor.Monitor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.MonitorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.MonitorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.MonitorResult.displayName = 'proto.Monitor.MonitorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.CameraStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.CameraStatistics.repeatedFields_, null);
};
goog.inherits(proto.Monitor.CameraStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.CameraStatistics.displayName = 'proto.Monitor.CameraStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.MonitorCamera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.MonitorCamera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.MonitorCamera.displayName = 'proto.Monitor.MonitorCamera';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ChangeNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ChangeNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ChangeNotification.displayName = 'proto.Monitor.ChangeNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.CreateMonitorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.CreateMonitorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.CreateMonitorRequest.displayName = 'proto.Monitor.CreateMonitorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.CreateMonitorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.CreateMonitorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.CreateMonitorResponse.displayName = 'proto.Monitor.CreateMonitorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ModifyMonitorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ModifyMonitorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ModifyMonitorRequest.displayName = 'proto.Monitor.ModifyMonitorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ModifyMonitorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ModifyMonitorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ModifyMonitorResponse.displayName = 'proto.Monitor.ModifyMonitorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.DeleteMonitorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.DeleteMonitorRequest.repeatedFields_, null);
};
goog.inherits(proto.Monitor.DeleteMonitorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.DeleteMonitorRequest.displayName = 'proto.Monitor.DeleteMonitorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.DeleteMonitorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.DeleteMonitorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.DeleteMonitorResponse.displayName = 'proto.Monitor.DeleteMonitorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.DescribeMonitorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.DescribeMonitorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.DescribeMonitorRequest.displayName = 'proto.Monitor.DescribeMonitorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.DescribeMonitorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.DescribeMonitorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.DescribeMonitorResponse.displayName = 'proto.Monitor.DescribeMonitorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ListMonitorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ListMonitorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ListMonitorsRequest.displayName = 'proto.Monitor.ListMonitorsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ListMonitorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.ListMonitorsResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.ListMonitorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ListMonitorsResponse.displayName = 'proto.Monitor.ListMonitorsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.StartMonitorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.StartMonitorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.StartMonitorRequest.displayName = 'proto.Monitor.StartMonitorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.StartMonitorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.StartMonitorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.StartMonitorResponse.displayName = 'proto.Monitor.StartMonitorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.StopMonitorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.StopMonitorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.StopMonitorRequest.displayName = 'proto.Monitor.StopMonitorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.StopMonitorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.StopMonitorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.StopMonitorResponse.displayName = 'proto.Monitor.StopMonitorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.GetCameraStatisticsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.GetCameraStatisticsRequest.repeatedFields_, null);
};
goog.inherits(proto.Monitor.GetCameraStatisticsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.GetCameraStatisticsRequest.displayName = 'proto.Monitor.GetCameraStatisticsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.GetCameraStatisticsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.GetCameraStatisticsResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.GetCameraStatisticsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.GetCameraStatisticsResponse.displayName = 'proto.Monitor.GetCameraStatisticsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.SubscribeMonitorResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.SubscribeMonitorResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.SubscribeMonitorResultsRequest.displayName = 'proto.Monitor.SubscribeMonitorResultsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.SubscribeMonitorResultsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.SubscribeMonitorResultsResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.SubscribeMonitorResultsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.SubscribeMonitorResultsResponse.displayName = 'proto.Monitor.SubscribeMonitorResultsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ListMonitorResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ListMonitorResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ListMonitorResultsRequest.displayName = 'proto.Monitor.ListMonitorResultsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ListMonitorResultsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.ListMonitorResultsResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.ListMonitorResultsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ListMonitorResultsResponse.displayName = 'proto.Monitor.ListMonitorResultsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.MonitorResultTotal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.MonitorResultTotal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.MonitorResultTotal.displayName = 'proto.Monitor.MonitorResultTotal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.GetResultCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.GetResultCountRequest.repeatedFields_, null);
};
goog.inherits(proto.Monitor.GetResultCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.GetResultCountRequest.displayName = 'proto.Monitor.GetResultCountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.GetResultCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.GetResultCountResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.GetResultCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.GetResultCountResponse.displayName = 'proto.Monitor.GetResultCountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.CameraSuspectCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.CameraSuspectCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.CameraSuspectCount.displayName = 'proto.Monitor.CameraSuspectCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.GetCameraResultCountAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.GetCameraResultCountAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.GetCameraResultCountAllRequest.displayName = 'proto.Monitor.GetCameraResultCountAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.GetCameraResultCountAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.GetCameraResultCountAllResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.GetCameraResultCountAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.GetCameraResultCountAllResponse.displayName = 'proto.Monitor.GetCameraResultCountAllResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ListMonitorsByCameraRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ListMonitorsByCameraRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ListMonitorsByCameraRequest.displayName = 'proto.Monitor.ListMonitorsByCameraRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ListMonitorsByCameraResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.ListMonitorsByCameraResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.ListMonitorsByCameraResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ListMonitorsByCameraResponse.displayName = 'proto.Monitor.ListMonitorsByCameraResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.SubscribeMonitorObjectChangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.SubscribeMonitorObjectChangeRequest.displayName = 'proto.Monitor.SubscribeMonitorObjectChangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Monitor.SubscribeMonitorObjectChangeResponse.repeatedFields_, null);
};
goog.inherits(proto.Monitor.SubscribeMonitorObjectChangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.SubscribeMonitorObjectChangeResponse.displayName = 'proto.Monitor.SubscribeMonitorObjectChangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ProcessMonitorResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ProcessMonitorResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ProcessMonitorResultRequest.displayName = 'proto.Monitor.ProcessMonitorResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Monitor.ProcessMonitorResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Monitor.ProcessMonitorResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Monitor.ProcessMonitorResultResponse.displayName = 'proto.Monitor.ProcessMonitorResultResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.Monitor.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.Monitor.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.Monitor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.Monitor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.Monitor.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    monitorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    monitorDetail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamps: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cameraListList: jspb.Message.toObjectList(msg.getCameraListList(),
    proto.Monitor.MonitorCamera.toObject, includeInstance),
    objectId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    objectGroupId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    timeRestrict: jspb.Message.getFieldWithDefault(msg, 12, 0),
    objectType: jspb.Message.getFieldWithDefault(msg, 13, 0),
    objectStatus: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.Monitor}
 */
proto.Monitor.Monitor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.Monitor;
  return proto.Monitor.Monitor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.Monitor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.Monitor}
 */
proto.Monitor.Monitor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonitorName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonitorDetail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamps(value);
      break;
    case 5:
      var value = new proto.Monitor.MonitorCamera;
      reader.readMessage(value,proto.Monitor.MonitorCamera.deserializeBinaryFromReader);
      msg.addCameraList(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setObjectId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setObjectGroupId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    case 9:
      var value = /** @type {!proto.Monitor.MonitorStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeRestrict(value);
      break;
    case 13:
      var value = /** @type {!proto.Common.ObjectGroupType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 14:
      var value = /** @type {!proto.Common.ObjectDataStatus} */ (reader.readEnum());
      msg.setObjectStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.Monitor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.Monitor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.Monitor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.Monitor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMonitorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMonitorDetail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamps();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCameraListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Monitor.MonitorCamera.serializeBinaryToWriter
    );
  }
  f = message.getObjectId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getObjectGroupId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getTimeRestrict();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getObjectStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string monitor_name = 2;
 * @return {string}
 */
proto.Monitor.Monitor.prototype.getMonitorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setMonitorName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string monitor_detail = 3;
 * @return {string}
 */
proto.Monitor.Monitor.prototype.getMonitorDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setMonitorDetail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timestamps = 4;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getTimestamps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setTimestamps = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated MonitorCamera camera_list = 5;
 * @return {!Array<!proto.Monitor.MonitorCamera>}
 */
proto.Monitor.Monitor.prototype.getCameraListList = function() {
  return /** @type{!Array<!proto.Monitor.MonitorCamera>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.MonitorCamera, 5));
};


/**
 * @param {!Array<!proto.Monitor.MonitorCamera>} value
 * @return {!proto.Monitor.Monitor} returns this
*/
proto.Monitor.Monitor.prototype.setCameraListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Monitor.MonitorCamera=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.MonitorCamera}
 */
proto.Monitor.Monitor.prototype.addCameraList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Monitor.MonitorCamera, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.clearCameraListList = function() {
  return this.setCameraListList([]);
};


/**
 * optional uint64 object_id = 6;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 object_group_id = 7;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getObjectGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setObjectGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float threshold = 8;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional MonitorStatus status = 9;
 * @return {!proto.Monitor.MonitorStatus}
 */
proto.Monitor.Monitor.prototype.getStatus = function() {
  return /** @type {!proto.Monitor.MonitorStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.Monitor.MonitorStatus} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint64 start_time = 10;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 end_time = 11;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 time_restrict = 12;
 * @return {number}
 */
proto.Monitor.Monitor.prototype.getTimeRestrict = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setTimeRestrict = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional Common.ObjectGroupType object_type = 13;
 * @return {!proto.Common.ObjectGroupType}
 */
proto.Monitor.Monitor.prototype.getObjectType = function() {
  return /** @type {!proto.Common.ObjectGroupType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.Common.ObjectGroupType} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional Common.ObjectDataStatus object_status = 14;
 * @return {!proto.Common.ObjectDataStatus}
 */
proto.Monitor.Monitor.prototype.getObjectStatus = function() {
  return /** @type {!proto.Common.ObjectDataStatus} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.Common.ObjectDataStatus} value
 * @return {!proto.Monitor.Monitor} returns this
 */
proto.Monitor.Monitor.prototype.setObjectStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.MonitorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.MonitorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.MonitorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.MonitorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    monitorId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cameraId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pathId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pathFrameTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pathImageRect: (f = msg.getPathImageRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    pathImageExtendRect: (f = msg.getPathImageExtendRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    pathImageKey: jspb.Message.getFieldWithDefault(msg, 9, ""),
    matchObjectGroupId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    matchObjectId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    matchObjectDataId: jspb.Message.getFieldWithDefault(msg, 12, 0),
    score: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    createTime: jspb.Message.getFieldWithDefault(msg, 14, 0),
    features: msg.getFeatures_asB64(),
    featureId: jspb.Message.getFieldWithDefault(msg, 16, 0),
    status: jspb.Message.getFieldWithDefault(msg, 17, 0),
    frameExtendInfo: (f = msg.getFrameExtendInfo()) && common_pb.FrameExtendInfo.toObject(includeInstance, f),
    objectType: jspb.Message.getFieldWithDefault(msg, 101, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.MonitorResult}
 */
proto.Monitor.MonitorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.MonitorResult;
  return proto.Monitor.MonitorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.MonitorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.MonitorResult}
 */
proto.Monitor.MonitorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPathFrameTimestamp(value);
      break;
    case 6:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setPathImageRect(value);
      break;
    case 7:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setPathImageExtendRect(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathImageKey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMatchObjectGroupId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMatchObjectId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMatchObjectDataId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateTime(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeatures(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeatureId(value);
      break;
    case 17:
      var value = /** @type {!proto.Monitor.MonitorResultStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 100:
      var value = new common_pb.FrameExtendInfo;
      reader.readMessage(value,common_pb.FrameExtendInfo.deserializeBinaryFromReader);
      msg.setFrameExtendInfo(value);
      break;
    case 101:
      var value = /** @type {!proto.Common.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.MonitorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.MonitorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.MonitorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.MonitorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPathId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPathFrameTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getPathImageRect();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getPathImageExtendRect();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPathImageKey();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMatchObjectGroupId();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getMatchObjectId();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getMatchObjectDataId();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getFeatures_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getFeatureId();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getFrameExtendInfo();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      common_pb.FrameExtendInfo.serializeBinaryToWriter
    );
  }
  f = message.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      101,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 monitor_id = 2;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 camera_id = 3;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string path_id = 4;
 * @return {string}
 */
proto.Monitor.MonitorResult.prototype.getPathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setPathId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 path_frame_timestamp = 5;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getPathFrameTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setPathFrameTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Common.Rect2F path_image_rect = 6;
 * @return {?proto.Common.Rect2F}
 */
proto.Monitor.MonitorResult.prototype.getPathImageRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 6));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.Monitor.MonitorResult} returns this
*/
proto.Monitor.MonitorResult.prototype.setPathImageRect = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.clearPathImageRect = function() {
  return this.setPathImageRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.MonitorResult.prototype.hasPathImageRect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Common.Rect2F path_image_extend_rect = 7;
 * @return {?proto.Common.Rect2F}
 */
proto.Monitor.MonitorResult.prototype.getPathImageExtendRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 7));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.Monitor.MonitorResult} returns this
*/
proto.Monitor.MonitorResult.prototype.setPathImageExtendRect = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.clearPathImageExtendRect = function() {
  return this.setPathImageExtendRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.MonitorResult.prototype.hasPathImageExtendRect = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float confidence = 8;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string path_image_key = 9;
 * @return {string}
 */
proto.Monitor.MonitorResult.prototype.getPathImageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setPathImageKey = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 match_object_group_id = 10;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getMatchObjectGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setMatchObjectGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 match_object_id = 11;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getMatchObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setMatchObjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 match_object_data_id = 12;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getMatchObjectDataId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setMatchObjectDataId = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional float score = 13;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional int32 create_time = 14;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional bytes features = 15;
 * @return {string}
 */
proto.Monitor.MonitorResult.prototype.getFeatures = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes features = 15;
 * This is a type-conversion wrapper around `getFeatures()`
 * @return {string}
 */
proto.Monitor.MonitorResult.prototype.getFeatures_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeatures()));
};


/**
 * optional bytes features = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeatures()`
 * @return {!Uint8Array}
 */
proto.Monitor.MonitorResult.prototype.getFeatures_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeatures()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setFeatures = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional uint64 feature_id = 16;
 * @return {number}
 */
proto.Monitor.MonitorResult.prototype.getFeatureId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional MonitorResultStatus status = 17;
 * @return {!proto.Monitor.MonitorResultStatus}
 */
proto.Monitor.MonitorResult.prototype.getStatus = function() {
  return /** @type {!proto.Monitor.MonitorResultStatus} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {!proto.Monitor.MonitorResultStatus} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 17, value);
};


/**
 * optional Common.FrameExtendInfo frame_extend_info = 100;
 * @return {?proto.Common.FrameExtendInfo}
 */
proto.Monitor.MonitorResult.prototype.getFrameExtendInfo = function() {
  return /** @type{?proto.Common.FrameExtendInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.FrameExtendInfo, 100));
};


/**
 * @param {?proto.Common.FrameExtendInfo|undefined} value
 * @return {!proto.Monitor.MonitorResult} returns this
*/
proto.Monitor.MonitorResult.prototype.setFrameExtendInfo = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.clearFrameExtendInfo = function() {
  return this.setFrameExtendInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.MonitorResult.prototype.hasFrameExtendInfo = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional Common.ObjectType object_type = 101;
 * @return {!proto.Common.ObjectType}
 */
proto.Monitor.MonitorResult.prototype.getObjectType = function() {
  return /** @type {!proto.Common.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {!proto.Common.ObjectType} value
 * @return {!proto.Monitor.MonitorResult} returns this
 */
proto.Monitor.MonitorResult.prototype.setObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 101, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.CameraStatistics.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.CameraStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.CameraStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.CameraStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CameraStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    countList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    totalCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.CameraStatistics}
 */
proto.Monitor.CameraStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.CameraStatistics;
  return proto.Monitor.CameraStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.CameraStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.CameraStatistics}
 */
proto.Monitor.CameraStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setCountList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.CameraStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.CameraStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.CameraStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CameraStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCountList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 camera_id = 1;
 * @return {number}
 */
proto.Monitor.CameraStatistics.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.CameraStatistics} returns this
 */
proto.Monitor.CameraStatistics.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint64 count = 2;
 * @return {!Array<number>}
 */
proto.Monitor.CameraStatistics.prototype.getCountList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Monitor.CameraStatistics} returns this
 */
proto.Monitor.CameraStatistics.prototype.setCountList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Monitor.CameraStatistics} returns this
 */
proto.Monitor.CameraStatistics.prototype.addCount = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.CameraStatistics} returns this
 */
proto.Monitor.CameraStatistics.prototype.clearCountList = function() {
  return this.setCountList([]);
};


/**
 * optional uint64 total_count = 3;
 * @return {number}
 */
proto.Monitor.CameraStatistics.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.CameraStatistics} returns this
 */
proto.Monitor.CameraStatistics.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.MonitorCamera.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.MonitorCamera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.MonitorCamera} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.MonitorCamera.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.MonitorCamera}
 */
proto.Monitor.MonitorCamera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.MonitorCamera;
  return proto.Monitor.MonitorCamera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.MonitorCamera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.MonitorCamera}
 */
proto.Monitor.MonitorCamera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTaskId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.MonitorCamera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.MonitorCamera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.MonitorCamera} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.MonitorCamera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 camera_id = 1;
 * @return {number}
 */
proto.Monitor.MonitorCamera.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorCamera} returns this
 */
proto.Monitor.MonitorCamera.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 task_id = 2;
 * @return {number}
 */
proto.Monitor.MonitorCamera.prototype.getTaskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorCamera} returns this
 */
proto.Monitor.MonitorCamera.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 status = 3;
 * @return {number}
 */
proto.Monitor.MonitorCamera.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorCamera} returns this
 */
proto.Monitor.MonitorCamera.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ChangeNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ChangeNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ChangeNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ChangeNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    changeType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    operationType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    monitor: (f = msg.getMonitor()) && proto.Monitor.Monitor.toObject(includeInstance, f),
    object: (f = msg.getObject()) && ObjectGroup_pb.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ChangeNotification}
 */
proto.Monitor.ChangeNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ChangeNotification;
  return proto.Monitor.ChangeNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ChangeNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ChangeNotification}
 */
proto.Monitor.ChangeNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Common.ChangeType} */ (reader.readEnum());
      msg.setChangeType(value);
      break;
    case 2:
      var value = /** @type {!proto.Common.OperationType} */ (reader.readEnum());
      msg.setOperationType(value);
      break;
    case 3:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.setMonitor(value);
      break;
    case 4:
      var value = new ObjectGroup_pb.Object;
      reader.readMessage(value,ObjectGroup_pb.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ChangeNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ChangeNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ChangeNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ChangeNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangeType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOperationType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMonitor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ObjectGroup_pb.Object.serializeBinaryToWriter
    );
  }
};


/**
 * optional Common.ChangeType change_type = 1;
 * @return {!proto.Common.ChangeType}
 */
proto.Monitor.ChangeNotification.prototype.getChangeType = function() {
  return /** @type {!proto.Common.ChangeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Common.ChangeType} value
 * @return {!proto.Monitor.ChangeNotification} returns this
 */
proto.Monitor.ChangeNotification.prototype.setChangeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Common.OperationType operation_type = 2;
 * @return {!proto.Common.OperationType}
 */
proto.Monitor.ChangeNotification.prototype.getOperationType = function() {
  return /** @type {!proto.Common.OperationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Common.OperationType} value
 * @return {!proto.Monitor.ChangeNotification} returns this
 */
proto.Monitor.ChangeNotification.prototype.setOperationType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Monitor monitor = 3;
 * @return {?proto.Monitor.Monitor}
 */
proto.Monitor.ChangeNotification.prototype.getMonitor = function() {
  return /** @type{?proto.Monitor.Monitor} */ (
    jspb.Message.getWrapperField(this, proto.Monitor.Monitor, 3));
};


/**
 * @param {?proto.Monitor.Monitor|undefined} value
 * @return {!proto.Monitor.ChangeNotification} returns this
*/
proto.Monitor.ChangeNotification.prototype.setMonitor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ChangeNotification} returns this
 */
proto.Monitor.ChangeNotification.prototype.clearMonitor = function() {
  return this.setMonitor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ChangeNotification.prototype.hasMonitor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ObjectGroup.Object object = 4;
 * @return {?proto.ObjectGroup.Object}
 */
proto.Monitor.ChangeNotification.prototype.getObject = function() {
  return /** @type{?proto.ObjectGroup.Object} */ (
    jspb.Message.getWrapperField(this, ObjectGroup_pb.Object, 4));
};


/**
 * @param {?proto.ObjectGroup.Object|undefined} value
 * @return {!proto.Monitor.ChangeNotification} returns this
*/
proto.Monitor.ChangeNotification.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ChangeNotification} returns this
 */
proto.Monitor.ChangeNotification.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ChangeNotification.prototype.hasObject = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.CreateMonitorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.CreateMonitorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.CreateMonitorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CreateMonitorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitor: (f = msg.getMonitor()) && proto.Monitor.Monitor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.CreateMonitorRequest}
 */
proto.Monitor.CreateMonitorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.CreateMonitorRequest;
  return proto.Monitor.CreateMonitorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.CreateMonitorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.CreateMonitorRequest}
 */
proto.Monitor.CreateMonitorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.setMonitor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.CreateMonitorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.CreateMonitorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.CreateMonitorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CreateMonitorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Monitor monitor = 1;
 * @return {?proto.Monitor.Monitor}
 */
proto.Monitor.CreateMonitorRequest.prototype.getMonitor = function() {
  return /** @type{?proto.Monitor.Monitor} */ (
    jspb.Message.getWrapperField(this, proto.Monitor.Monitor, 1));
};


/**
 * @param {?proto.Monitor.Monitor|undefined} value
 * @return {!proto.Monitor.CreateMonitorRequest} returns this
*/
proto.Monitor.CreateMonitorRequest.prototype.setMonitor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.CreateMonitorRequest} returns this
 */
proto.Monitor.CreateMonitorRequest.prototype.clearMonitor = function() {
  return this.setMonitor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.CreateMonitorRequest.prototype.hasMonitor = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.CreateMonitorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.CreateMonitorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.CreateMonitorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CreateMonitorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    monitor: (f = msg.getMonitor()) && proto.Monitor.Monitor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.CreateMonitorResponse}
 */
proto.Monitor.CreateMonitorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.CreateMonitorResponse;
  return proto.Monitor.CreateMonitorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.CreateMonitorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.CreateMonitorResponse}
 */
proto.Monitor.CreateMonitorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.setMonitor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.CreateMonitorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.CreateMonitorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.CreateMonitorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CreateMonitorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.CreateMonitorResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.CreateMonitorResponse} returns this
 */
proto.Monitor.CreateMonitorResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.CreateMonitorResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.CreateMonitorResponse} returns this
*/
proto.Monitor.CreateMonitorResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.CreateMonitorResponse} returns this
 */
proto.Monitor.CreateMonitorResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.CreateMonitorResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Monitor monitor = 3;
 * @return {?proto.Monitor.Monitor}
 */
proto.Monitor.CreateMonitorResponse.prototype.getMonitor = function() {
  return /** @type{?proto.Monitor.Monitor} */ (
    jspb.Message.getWrapperField(this, proto.Monitor.Monitor, 3));
};


/**
 * @param {?proto.Monitor.Monitor|undefined} value
 * @return {!proto.Monitor.CreateMonitorResponse} returns this
*/
proto.Monitor.CreateMonitorResponse.prototype.setMonitor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.CreateMonitorResponse} returns this
 */
proto.Monitor.CreateMonitorResponse.prototype.clearMonitor = function() {
  return this.setMonitor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.CreateMonitorResponse.prototype.hasMonitor = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ModifyMonitorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ModifyMonitorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ModifyMonitorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ModifyMonitorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitor: (f = msg.getMonitor()) && proto.Monitor.Monitor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ModifyMonitorRequest}
 */
proto.Monitor.ModifyMonitorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ModifyMonitorRequest;
  return proto.Monitor.ModifyMonitorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ModifyMonitorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ModifyMonitorRequest}
 */
proto.Monitor.ModifyMonitorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.setMonitor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ModifyMonitorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ModifyMonitorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ModifyMonitorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ModifyMonitorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Monitor monitor = 1;
 * @return {?proto.Monitor.Monitor}
 */
proto.Monitor.ModifyMonitorRequest.prototype.getMonitor = function() {
  return /** @type{?proto.Monitor.Monitor} */ (
    jspb.Message.getWrapperField(this, proto.Monitor.Monitor, 1));
};


/**
 * @param {?proto.Monitor.Monitor|undefined} value
 * @return {!proto.Monitor.ModifyMonitorRequest} returns this
*/
proto.Monitor.ModifyMonitorRequest.prototype.setMonitor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ModifyMonitorRequest} returns this
 */
proto.Monitor.ModifyMonitorRequest.prototype.clearMonitor = function() {
  return this.setMonitor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ModifyMonitorRequest.prototype.hasMonitor = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ModifyMonitorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ModifyMonitorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ModifyMonitorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ModifyMonitorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ModifyMonitorResponse}
 */
proto.Monitor.ModifyMonitorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ModifyMonitorResponse;
  return proto.Monitor.ModifyMonitorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ModifyMonitorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ModifyMonitorResponse}
 */
proto.Monitor.ModifyMonitorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ModifyMonitorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ModifyMonitorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ModifyMonitorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ModifyMonitorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.ModifyMonitorResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ModifyMonitorResponse} returns this
 */
proto.Monitor.ModifyMonitorResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.ModifyMonitorResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.ModifyMonitorResponse} returns this
*/
proto.Monitor.ModifyMonitorResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ModifyMonitorResponse} returns this
 */
proto.Monitor.ModifyMonitorResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ModifyMonitorResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.DeleteMonitorRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.DeleteMonitorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.DeleteMonitorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.DeleteMonitorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DeleteMonitorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.DeleteMonitorRequest}
 */
proto.Monitor.DeleteMonitorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.DeleteMonitorRequest;
  return proto.Monitor.DeleteMonitorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.DeleteMonitorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.DeleteMonitorRequest}
 */
proto.Monitor.DeleteMonitorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setMonitorIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.DeleteMonitorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.DeleteMonitorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.DeleteMonitorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DeleteMonitorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorIdList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 monitor_id = 1;
 * @return {!Array<number>}
 */
proto.Monitor.DeleteMonitorRequest.prototype.getMonitorIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Monitor.DeleteMonitorRequest} returns this
 */
proto.Monitor.DeleteMonitorRequest.prototype.setMonitorIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Monitor.DeleteMonitorRequest} returns this
 */
proto.Monitor.DeleteMonitorRequest.prototype.addMonitorId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.DeleteMonitorRequest} returns this
 */
proto.Monitor.DeleteMonitorRequest.prototype.clearMonitorIdList = function() {
  return this.setMonitorIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.DeleteMonitorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.DeleteMonitorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.DeleteMonitorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DeleteMonitorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.DeleteMonitorResponse}
 */
proto.Monitor.DeleteMonitorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.DeleteMonitorResponse;
  return proto.Monitor.DeleteMonitorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.DeleteMonitorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.DeleteMonitorResponse}
 */
proto.Monitor.DeleteMonitorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.DeleteMonitorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.DeleteMonitorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.DeleteMonitorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DeleteMonitorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.DeleteMonitorResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.DeleteMonitorResponse} returns this
 */
proto.Monitor.DeleteMonitorResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.DeleteMonitorResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.DeleteMonitorResponse} returns this
*/
proto.Monitor.DeleteMonitorResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.DeleteMonitorResponse} returns this
 */
proto.Monitor.DeleteMonitorResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.DeleteMonitorResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.DescribeMonitorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.DescribeMonitorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.DescribeMonitorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DescribeMonitorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.DescribeMonitorRequest}
 */
proto.Monitor.DescribeMonitorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.DescribeMonitorRequest;
  return proto.Monitor.DescribeMonitorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.DescribeMonitorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.DescribeMonitorRequest}
 */
proto.Monitor.DescribeMonitorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.DescribeMonitorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.DescribeMonitorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.DescribeMonitorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DescribeMonitorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.DescribeMonitorRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.DescribeMonitorRequest} returns this
 */
proto.Monitor.DescribeMonitorRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.DescribeMonitorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.DescribeMonitorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.DescribeMonitorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DescribeMonitorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    monitor: (f = msg.getMonitor()) && proto.Monitor.Monitor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.DescribeMonitorResponse}
 */
proto.Monitor.DescribeMonitorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.DescribeMonitorResponse;
  return proto.Monitor.DescribeMonitorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.DescribeMonitorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.DescribeMonitorResponse}
 */
proto.Monitor.DescribeMonitorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.setMonitor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.DescribeMonitorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.DescribeMonitorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.DescribeMonitorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.DescribeMonitorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.DescribeMonitorResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.DescribeMonitorResponse} returns this
 */
proto.Monitor.DescribeMonitorResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.DescribeMonitorResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.DescribeMonitorResponse} returns this
*/
proto.Monitor.DescribeMonitorResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.DescribeMonitorResponse} returns this
 */
proto.Monitor.DescribeMonitorResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.DescribeMonitorResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Monitor monitor = 3;
 * @return {?proto.Monitor.Monitor}
 */
proto.Monitor.DescribeMonitorResponse.prototype.getMonitor = function() {
  return /** @type{?proto.Monitor.Monitor} */ (
    jspb.Message.getWrapperField(this, proto.Monitor.Monitor, 3));
};


/**
 * @param {?proto.Monitor.Monitor|undefined} value
 * @return {!proto.Monitor.DescribeMonitorResponse} returns this
*/
proto.Monitor.DescribeMonitorResponse.prototype.setMonitor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.DescribeMonitorResponse} returns this
 */
proto.Monitor.DescribeMonitorResponse.prototype.clearMonitor = function() {
  return this.setMonitor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.DescribeMonitorResponse.prototype.hasMonitor = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ListMonitorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ListMonitorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ListMonitorsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxResults: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ListMonitorsRequest}
 */
proto.Monitor.ListMonitorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ListMonitorsRequest;
  return proto.Monitor.ListMonitorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ListMonitorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ListMonitorsRequest}
 */
proto.Monitor.ListMonitorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ListMonitorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ListMonitorsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ListMonitorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 max_results = 1;
 * @return {number}
 */
proto.Monitor.ListMonitorsRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorsRequest} returns this
 */
proto.Monitor.ListMonitorsRequest.prototype.setMaxResults = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string next_token = 2;
 * @return {string}
 */
proto.Monitor.ListMonitorsRequest.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorsRequest} returns this
 */
proto.Monitor.ListMonitorsRequest.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.ListMonitorsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ListMonitorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ListMonitorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ListMonitorsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    monitorListList: jspb.Message.toObjectList(msg.getMonitorListList(),
    proto.Monitor.Monitor.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ListMonitorsResponse}
 */
proto.Monitor.ListMonitorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ListMonitorsResponse;
  return proto.Monitor.ListMonitorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ListMonitorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ListMonitorsResponse}
 */
proto.Monitor.ListMonitorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.addMonitorList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ListMonitorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ListMonitorsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ListMonitorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitorListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.ListMonitorsResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
 */
proto.Monitor.ListMonitorsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.ListMonitorsResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
*/
proto.Monitor.ListMonitorsResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
 */
proto.Monitor.ListMonitorsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ListMonitorsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Monitor monitor_list = 3;
 * @return {!Array<!proto.Monitor.Monitor>}
 */
proto.Monitor.ListMonitorsResponse.prototype.getMonitorListList = function() {
  return /** @type{!Array<!proto.Monitor.Monitor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.Monitor, 3));
};


/**
 * @param {!Array<!proto.Monitor.Monitor>} value
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
*/
proto.Monitor.ListMonitorsResponse.prototype.setMonitorListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.Monitor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.Monitor}
 */
proto.Monitor.ListMonitorsResponse.prototype.addMonitorList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.Monitor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
 */
proto.Monitor.ListMonitorsResponse.prototype.clearMonitorListList = function() {
  return this.setMonitorListList([]);
};


/**
 * optional uint64 total_count = 4;
 * @return {number}
 */
proto.Monitor.ListMonitorsResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
 */
proto.Monitor.ListMonitorsResponse.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string next_token = 5;
 * @return {string}
 */
proto.Monitor.ListMonitorsResponse.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorsResponse} returns this
 */
proto.Monitor.ListMonitorsResponse.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.StartMonitorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.StartMonitorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.StartMonitorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StartMonitorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.StartMonitorRequest}
 */
proto.Monitor.StartMonitorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.StartMonitorRequest;
  return proto.Monitor.StartMonitorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.StartMonitorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.StartMonitorRequest}
 */
proto.Monitor.StartMonitorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.StartMonitorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.StartMonitorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.StartMonitorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StartMonitorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.StartMonitorRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.StartMonitorRequest} returns this
 */
proto.Monitor.StartMonitorRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.StartMonitorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.StartMonitorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.StartMonitorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StartMonitorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.StartMonitorResponse}
 */
proto.Monitor.StartMonitorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.StartMonitorResponse;
  return proto.Monitor.StartMonitorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.StartMonitorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.StartMonitorResponse}
 */
proto.Monitor.StartMonitorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.StartMonitorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.StartMonitorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.StartMonitorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StartMonitorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.StartMonitorResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.StartMonitorResponse} returns this
 */
proto.Monitor.StartMonitorResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.StartMonitorResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.StartMonitorResponse} returns this
*/
proto.Monitor.StartMonitorResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.StartMonitorResponse} returns this
 */
proto.Monitor.StartMonitorResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.StartMonitorResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.StopMonitorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.StopMonitorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.StopMonitorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StopMonitorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.StopMonitorRequest}
 */
proto.Monitor.StopMonitorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.StopMonitorRequest;
  return proto.Monitor.StopMonitorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.StopMonitorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.StopMonitorRequest}
 */
proto.Monitor.StopMonitorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.StopMonitorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.StopMonitorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.StopMonitorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StopMonitorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.StopMonitorRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.StopMonitorRequest} returns this
 */
proto.Monitor.StopMonitorRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.StopMonitorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.StopMonitorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.StopMonitorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StopMonitorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.StopMonitorResponse}
 */
proto.Monitor.StopMonitorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.StopMonitorResponse;
  return proto.Monitor.StopMonitorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.StopMonitorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.StopMonitorResponse}
 */
proto.Monitor.StopMonitorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.StopMonitorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.StopMonitorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.StopMonitorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.StopMonitorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.StopMonitorResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.StopMonitorResponse} returns this
 */
proto.Monitor.StopMonitorResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.StopMonitorResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.StopMonitorResponse} returns this
*/
proto.Monitor.StopMonitorResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.StopMonitorResponse} returns this
 */
proto.Monitor.StopMonitorResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.StopMonitorResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.GetCameraStatisticsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.GetCameraStatisticsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.GetCameraStatisticsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.GetCameraStatisticsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraStatisticsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.GetCameraStatisticsRequest}
 */
proto.Monitor.GetCameraStatisticsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.GetCameraStatisticsRequest;
  return proto.Monitor.GetCameraStatisticsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.GetCameraStatisticsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.GetCameraStatisticsRequest}
 */
proto.Monitor.GetCameraStatisticsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setCameraIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.GetCameraStatisticsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.GetCameraStatisticsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.GetCameraStatisticsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraStatisticsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 camera_ids = 1;
 * @return {!Array<number>}
 */
proto.Monitor.GetCameraStatisticsRequest.prototype.getCameraIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Monitor.GetCameraStatisticsRequest} returns this
 */
proto.Monitor.GetCameraStatisticsRequest.prototype.setCameraIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Monitor.GetCameraStatisticsRequest} returns this
 */
proto.Monitor.GetCameraStatisticsRequest.prototype.addCameraIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.GetCameraStatisticsRequest} returns this
 */
proto.Monitor.GetCameraStatisticsRequest.prototype.clearCameraIdsList = function() {
  return this.setCameraIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.GetCameraStatisticsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.GetCameraStatisticsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.GetCameraStatisticsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraStatisticsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.Monitor.CameraStatistics.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.GetCameraStatisticsResponse}
 */
proto.Monitor.GetCameraStatisticsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.GetCameraStatisticsResponse;
  return proto.Monitor.GetCameraStatisticsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.GetCameraStatisticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.GetCameraStatisticsResponse}
 */
proto.Monitor.GetCameraStatisticsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.CameraStatistics;
      reader.readMessage(value,proto.Monitor.CameraStatistics.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.GetCameraStatisticsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.GetCameraStatisticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraStatisticsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.CameraStatistics.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.GetCameraStatisticsResponse} returns this
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.GetCameraStatisticsResponse} returns this
*/
proto.Monitor.GetCameraStatisticsResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.GetCameraStatisticsResponse} returns this
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CameraStatistics results = 3;
 * @return {!Array<!proto.Monitor.CameraStatistics>}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.Monitor.CameraStatistics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.CameraStatistics, 3));
};


/**
 * @param {!Array<!proto.Monitor.CameraStatistics>} value
 * @return {!proto.Monitor.GetCameraStatisticsResponse} returns this
*/
proto.Monitor.GetCameraStatisticsResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.CameraStatistics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.CameraStatistics}
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.CameraStatistics, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.GetCameraStatisticsResponse} returns this
 */
proto.Monitor.GetCameraStatisticsResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.SubscribeMonitorResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.SubscribeMonitorResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.SubscribeMonitorResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.SubscribeMonitorResultsRequest}
 */
proto.Monitor.SubscribeMonitorResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.SubscribeMonitorResultsRequest;
  return proto.Monitor.SubscribeMonitorResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.SubscribeMonitorResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.SubscribeMonitorResultsRequest}
 */
proto.Monitor.SubscribeMonitorResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.SubscribeMonitorResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.SubscribeMonitorResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.SubscribeMonitorResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.SubscribeMonitorResultsRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.SubscribeMonitorResultsRequest} returns this
 */
proto.Monitor.SubscribeMonitorResultsRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.SubscribeMonitorResultsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.SubscribeMonitorResultsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.SubscribeMonitorResultsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorResultsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    resultItemsList: jspb.Message.toObjectList(msg.getResultItemsList(),
    proto.Monitor.MonitorResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse}
 */
proto.Monitor.SubscribeMonitorResultsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.SubscribeMonitorResultsResponse;
  return proto.Monitor.SubscribeMonitorResultsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.SubscribeMonitorResultsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse}
 */
proto.Monitor.SubscribeMonitorResultsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.MonitorResult;
      reader.readMessage(value,proto.Monitor.MonitorResult.deserializeBinaryFromReader);
      msg.addResultItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.SubscribeMonitorResultsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.SubscribeMonitorResultsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorResultsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getResultItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.MonitorResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse} returns this
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse} returns this
*/
proto.Monitor.SubscribeMonitorResultsResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse} returns this
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MonitorResult result_items = 3;
 * @return {!Array<!proto.Monitor.MonitorResult>}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.getResultItemsList = function() {
  return /** @type{!Array<!proto.Monitor.MonitorResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.MonitorResult, 3));
};


/**
 * @param {!Array<!proto.Monitor.MonitorResult>} value
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse} returns this
*/
proto.Monitor.SubscribeMonitorResultsResponse.prototype.setResultItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.MonitorResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.MonitorResult}
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.addResultItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.MonitorResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.SubscribeMonitorResultsResponse} returns this
 */
proto.Monitor.SubscribeMonitorResultsResponse.prototype.clearResultItemsList = function() {
  return this.setResultItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ListMonitorResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ListMonitorResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ListMonitorResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxResults: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ListMonitorResultsRequest}
 */
proto.Monitor.ListMonitorResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ListMonitorResultsRequest;
  return proto.Monitor.ListMonitorResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ListMonitorResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ListMonitorResultsRequest}
 */
proto.Monitor.ListMonitorResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    case 4:
      var value = /** @type {!proto.Monitor.MonitorResultStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ListMonitorResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ListMonitorResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ListMonitorResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.ListMonitorResultsRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorResultsRequest} returns this
 */
proto.Monitor.ListMonitorResultsRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 max_results = 2;
 * @return {number}
 */
proto.Monitor.ListMonitorResultsRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorResultsRequest} returns this
 */
proto.Monitor.ListMonitorResultsRequest.prototype.setMaxResults = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string next_token = 3;
 * @return {string}
 */
proto.Monitor.ListMonitorResultsRequest.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorResultsRequest} returns this
 */
proto.Monitor.ListMonitorResultsRequest.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional MonitorResultStatus status = 4;
 * @return {!proto.Monitor.MonitorResultStatus}
 */
proto.Monitor.ListMonitorResultsRequest.prototype.getStatus = function() {
  return /** @type {!proto.Monitor.MonitorResultStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Monitor.MonitorResultStatus} value
 * @return {!proto.Monitor.ListMonitorResultsRequest} returns this
 */
proto.Monitor.ListMonitorResultsRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.ListMonitorResultsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ListMonitorResultsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ListMonitorResultsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorResultsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    monitorResultsList: jspb.Message.toObjectList(msg.getMonitorResultsList(),
    proto.Monitor.MonitorResult.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    todayCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ListMonitorResultsResponse}
 */
proto.Monitor.ListMonitorResultsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ListMonitorResultsResponse;
  return proto.Monitor.ListMonitorResultsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ListMonitorResultsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ListMonitorResultsResponse}
 */
proto.Monitor.ListMonitorResultsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.MonitorResult;
      reader.readMessage(value,proto.Monitor.MonitorResult.deserializeBinaryFromReader);
      msg.addMonitorResults(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTodayCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ListMonitorResultsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ListMonitorResultsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorResultsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitorResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.MonitorResult.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTodayCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
 */
proto.Monitor.ListMonitorResultsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
*/
proto.Monitor.ListMonitorResultsResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
 */
proto.Monitor.ListMonitorResultsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MonitorResult monitor_results = 3;
 * @return {!Array<!proto.Monitor.MonitorResult>}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.getMonitorResultsList = function() {
  return /** @type{!Array<!proto.Monitor.MonitorResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.MonitorResult, 3));
};


/**
 * @param {!Array<!proto.Monitor.MonitorResult>} value
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
*/
proto.Monitor.ListMonitorResultsResponse.prototype.setMonitorResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.MonitorResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.MonitorResult}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.addMonitorResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.MonitorResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
 */
proto.Monitor.ListMonitorResultsResponse.prototype.clearMonitorResultsList = function() {
  return this.setMonitorResultsList([]);
};


/**
 * optional uint64 total_count = 4;
 * @return {number}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
 */
proto.Monitor.ListMonitorResultsResponse.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 today_count = 5;
 * @return {number}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.getTodayCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
 */
proto.Monitor.ListMonitorResultsResponse.prototype.setTodayCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string next_token = 6;
 * @return {string}
 */
proto.Monitor.ListMonitorResultsResponse.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorResultsResponse} returns this
 */
proto.Monitor.ListMonitorResultsResponse.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.MonitorResultTotal.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.MonitorResultTotal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.MonitorResultTotal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.MonitorResultTotal.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    todayCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.MonitorResultTotal}
 */
proto.Monitor.MonitorResultTotal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.MonitorResultTotal;
  return proto.Monitor.MonitorResultTotal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.MonitorResultTotal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.MonitorResultTotal}
 */
proto.Monitor.MonitorResultTotal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTodayCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.MonitorResultTotal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.MonitorResultTotal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.MonitorResultTotal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.MonitorResultTotal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTodayCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.MonitorResultTotal.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResultTotal} returns this
 */
proto.Monitor.MonitorResultTotal.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 total_count = 2;
 * @return {number}
 */
proto.Monitor.MonitorResultTotal.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResultTotal} returns this
 */
proto.Monitor.MonitorResultTotal.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 today_count = 3;
 * @return {number}
 */
proto.Monitor.MonitorResultTotal.prototype.getTodayCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.MonitorResultTotal} returns this
 */
proto.Monitor.MonitorResultTotal.prototype.setTodayCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.GetResultCountRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.GetResultCountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.GetResultCountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.GetResultCountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetResultCountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.GetResultCountRequest}
 */
proto.Monitor.GetResultCountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.GetResultCountRequest;
  return proto.Monitor.GetResultCountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.GetResultCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.GetResultCountRequest}
 */
proto.Monitor.GetResultCountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setMonitorIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.GetResultCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.GetResultCountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.GetResultCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetResultCountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 monitor_ids = 1;
 * @return {!Array<number>}
 */
proto.Monitor.GetResultCountRequest.prototype.getMonitorIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Monitor.GetResultCountRequest} returns this
 */
proto.Monitor.GetResultCountRequest.prototype.setMonitorIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Monitor.GetResultCountRequest} returns this
 */
proto.Monitor.GetResultCountRequest.prototype.addMonitorIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.GetResultCountRequest} returns this
 */
proto.Monitor.GetResultCountRequest.prototype.clearMonitorIdsList = function() {
  return this.setMonitorIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.GetResultCountResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.GetResultCountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.GetResultCountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.GetResultCountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetResultCountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    monitorResultTotalsList: jspb.Message.toObjectList(msg.getMonitorResultTotalsList(),
    proto.Monitor.MonitorResultTotal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.GetResultCountResponse}
 */
proto.Monitor.GetResultCountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.GetResultCountResponse;
  return proto.Monitor.GetResultCountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.GetResultCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.GetResultCountResponse}
 */
proto.Monitor.GetResultCountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.MonitorResultTotal;
      reader.readMessage(value,proto.Monitor.MonitorResultTotal.deserializeBinaryFromReader);
      msg.addMonitorResultTotals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.GetResultCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.GetResultCountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.GetResultCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetResultCountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitorResultTotalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.MonitorResultTotal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.GetResultCountResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.GetResultCountResponse} returns this
 */
proto.Monitor.GetResultCountResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.GetResultCountResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.GetResultCountResponse} returns this
*/
proto.Monitor.GetResultCountResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.GetResultCountResponse} returns this
 */
proto.Monitor.GetResultCountResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.GetResultCountResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MonitorResultTotal monitor_result_totals = 3;
 * @return {!Array<!proto.Monitor.MonitorResultTotal>}
 */
proto.Monitor.GetResultCountResponse.prototype.getMonitorResultTotalsList = function() {
  return /** @type{!Array<!proto.Monitor.MonitorResultTotal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.MonitorResultTotal, 3));
};


/**
 * @param {!Array<!proto.Monitor.MonitorResultTotal>} value
 * @return {!proto.Monitor.GetResultCountResponse} returns this
*/
proto.Monitor.GetResultCountResponse.prototype.setMonitorResultTotalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.MonitorResultTotal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.MonitorResultTotal}
 */
proto.Monitor.GetResultCountResponse.prototype.addMonitorResultTotals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.MonitorResultTotal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.GetResultCountResponse} returns this
 */
proto.Monitor.GetResultCountResponse.prototype.clearMonitorResultTotalsList = function() {
  return this.setMonitorResultTotalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.CameraSuspectCount.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.CameraSuspectCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.CameraSuspectCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CameraSuspectCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.CameraSuspectCount}
 */
proto.Monitor.CameraSuspectCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.CameraSuspectCount;
  return proto.Monitor.CameraSuspectCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.CameraSuspectCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.CameraSuspectCount}
 */
proto.Monitor.CameraSuspectCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.CameraSuspectCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.CameraSuspectCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.CameraSuspectCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.CameraSuspectCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 camera_id = 1;
 * @return {number}
 */
proto.Monitor.CameraSuspectCount.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.CameraSuspectCount} returns this
 */
proto.Monitor.CameraSuspectCount.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 count = 2;
 * @return {number}
 */
proto.Monitor.CameraSuspectCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.CameraSuspectCount} returns this
 */
proto.Monitor.CameraSuspectCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.GetCameraResultCountAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.GetCameraResultCountAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.GetCameraResultCountAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraResultCountAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.GetCameraResultCountAllRequest}
 */
proto.Monitor.GetCameraResultCountAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.GetCameraResultCountAllRequest;
  return proto.Monitor.GetCameraResultCountAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.GetCameraResultCountAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.GetCameraResultCountAllRequest}
 */
proto.Monitor.GetCameraResultCountAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.GetCameraResultCountAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.GetCameraResultCountAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.GetCameraResultCountAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraResultCountAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.GetCameraResultCountAllRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.GetCameraResultCountAllRequest} returns this
 */
proto.Monitor.GetCameraResultCountAllRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.GetCameraResultCountAllResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.GetCameraResultCountAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.GetCameraResultCountAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraResultCountAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.Monitor.CameraSuspectCount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.GetCameraResultCountAllResponse}
 */
proto.Monitor.GetCameraResultCountAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.GetCameraResultCountAllResponse;
  return proto.Monitor.GetCameraResultCountAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.GetCameraResultCountAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.GetCameraResultCountAllResponse}
 */
proto.Monitor.GetCameraResultCountAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.CameraSuspectCount;
      reader.readMessage(value,proto.Monitor.CameraSuspectCount.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.GetCameraResultCountAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.GetCameraResultCountAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.GetCameraResultCountAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.CameraSuspectCount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.GetCameraResultCountAllResponse} returns this
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.GetCameraResultCountAllResponse} returns this
*/
proto.Monitor.GetCameraResultCountAllResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.GetCameraResultCountAllResponse} returns this
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CameraSuspectCount result = 3;
 * @return {!Array<!proto.Monitor.CameraSuspectCount>}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.getResultList = function() {
  return /** @type{!Array<!proto.Monitor.CameraSuspectCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.CameraSuspectCount, 3));
};


/**
 * @param {!Array<!proto.Monitor.CameraSuspectCount>} value
 * @return {!proto.Monitor.GetCameraResultCountAllResponse} returns this
*/
proto.Monitor.GetCameraResultCountAllResponse.prototype.setResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.CameraSuspectCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.CameraSuspectCount}
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.CameraSuspectCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.GetCameraResultCountAllResponse} returns this
 */
proto.Monitor.GetCameraResultCountAllResponse.prototype.clearResultList = function() {
  return this.setResultList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ListMonitorsByCameraRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ListMonitorsByCameraRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsByCameraRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxResults: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ListMonitorsByCameraRequest}
 */
proto.Monitor.ListMonitorsByCameraRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ListMonitorsByCameraRequest;
  return proto.Monitor.ListMonitorsByCameraRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ListMonitorsByCameraRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ListMonitorsByCameraRequest}
 */
proto.Monitor.ListMonitorsByCameraRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxResults(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ListMonitorsByCameraRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ListMonitorsByCameraRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsByCameraRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaxResults();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 camera_id = 1;
 * @return {number}
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorsByCameraRequest} returns this
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 max_results = 2;
 * @return {number}
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.getMaxResults = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorsByCameraRequest} returns this
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.setMaxResults = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string next_token = 3;
 * @return {string}
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorsByCameraRequest} returns this
 */
proto.Monitor.ListMonitorsByCameraRequest.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.ListMonitorsByCameraResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ListMonitorsByCameraResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ListMonitorsByCameraResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsByCameraResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    monitorListList: jspb.Message.toObjectList(msg.getMonitorListList(),
    proto.Monitor.Monitor.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nextToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ListMonitorsByCameraResponse}
 */
proto.Monitor.ListMonitorsByCameraResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ListMonitorsByCameraResponse;
  return proto.Monitor.ListMonitorsByCameraResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ListMonitorsByCameraResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ListMonitorsByCameraResponse}
 */
proto.Monitor.ListMonitorsByCameraResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.Monitor;
      reader.readMessage(value,proto.Monitor.Monitor.deserializeBinaryFromReader);
      msg.addMonitorList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ListMonitorsByCameraResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ListMonitorsByCameraResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ListMonitorsByCameraResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitorListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.Monitor.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNextToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
*/
proto.Monitor.ListMonitorsByCameraResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Monitor monitor_list = 3;
 * @return {!Array<!proto.Monitor.Monitor>}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.getMonitorListList = function() {
  return /** @type{!Array<!proto.Monitor.Monitor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.Monitor, 3));
};


/**
 * @param {!Array<!proto.Monitor.Monitor>} value
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
*/
proto.Monitor.ListMonitorsByCameraResponse.prototype.setMonitorListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.Monitor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.Monitor}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.addMonitorList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.Monitor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.clearMonitorListList = function() {
  return this.setMonitorListList([]);
};


/**
 * optional uint64 total_count = 4;
 * @return {number}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string next_token = 5;
 * @return {string}
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.getNextToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ListMonitorsByCameraResponse} returns this
 */
proto.Monitor.ListMonitorsByCameraResponse.prototype.setNextToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.SubscribeMonitorObjectChangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.SubscribeMonitorObjectChangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribeStatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeRequest}
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.SubscribeMonitorObjectChangeRequest;
  return proto.Monitor.SubscribeMonitorObjectChangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.SubscribeMonitorObjectChangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeRequest}
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Common.SubscribeStatus} */ (reader.readEnum());
      msg.setSubscribeStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.SubscribeMonitorObjectChangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.SubscribeMonitorObjectChangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribeStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Common.SubscribeStatus subscribe_status = 1;
 * @return {!proto.Common.SubscribeStatus}
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.prototype.getSubscribeStatus = function() {
  return /** @type {!proto.Common.SubscribeStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Common.SubscribeStatus} value
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeRequest} returns this
 */
proto.Monitor.SubscribeMonitorObjectChangeRequest.prototype.setSubscribeStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.SubscribeMonitorObjectChangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.SubscribeMonitorObjectChangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    changenotificationlistList: jspb.Message.toObjectList(msg.getChangenotificationlistList(),
    proto.Monitor.ChangeNotification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.SubscribeMonitorObjectChangeResponse;
  return proto.Monitor.SubscribeMonitorObjectChangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.SubscribeMonitorObjectChangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Monitor.ChangeNotification;
      reader.readMessage(value,proto.Monitor.ChangeNotification.deserializeBinaryFromReader);
      msg.addChangenotificationlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.SubscribeMonitorObjectChangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.SubscribeMonitorObjectChangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getChangenotificationlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Monitor.ChangeNotification.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse} returns this
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse} returns this
*/
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse} returns this
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChangeNotification changeNotificationList = 3;
 * @return {!Array<!proto.Monitor.ChangeNotification>}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.getChangenotificationlistList = function() {
  return /** @type{!Array<!proto.Monitor.ChangeNotification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Monitor.ChangeNotification, 3));
};


/**
 * @param {!Array<!proto.Monitor.ChangeNotification>} value
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse} returns this
*/
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.setChangenotificationlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Monitor.ChangeNotification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Monitor.ChangeNotification}
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.addChangenotificationlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Monitor.ChangeNotification, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Monitor.SubscribeMonitorObjectChangeResponse} returns this
 */
proto.Monitor.SubscribeMonitorObjectChangeResponse.prototype.clearChangenotificationlistList = function() {
  return this.setChangenotificationlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ProcessMonitorResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ProcessMonitorResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ProcessMonitorResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objectId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ProcessMonitorResultRequest}
 */
proto.Monitor.ProcessMonitorResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ProcessMonitorResultRequest;
  return proto.Monitor.ProcessMonitorResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ProcessMonitorResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ProcessMonitorResultRequest}
 */
proto.Monitor.ProcessMonitorResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 3:
      var value = /** @type {!proto.Monitor.MonitorResultStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ProcessMonitorResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ProcessMonitorResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ProcessMonitorResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 monitor_id = 1;
 * @return {number}
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Monitor.ProcessMonitorResultRequest} returns this
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string object_id = 2;
 * @return {string}
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ProcessMonitorResultRequest} returns this
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MonitorResultStatus status = 3;
 * @return {!proto.Monitor.MonitorResultStatus}
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.getStatus = function() {
  return /** @type {!proto.Monitor.MonitorResultStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Monitor.MonitorResultStatus} value
 * @return {!proto.Monitor.ProcessMonitorResultRequest} returns this
 */
proto.Monitor.ProcessMonitorResultRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Monitor.ProcessMonitorResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Monitor.ProcessMonitorResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ProcessMonitorResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Monitor.ProcessMonitorResultResponse}
 */
proto.Monitor.ProcessMonitorResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Monitor.ProcessMonitorResultResponse;
  return proto.Monitor.ProcessMonitorResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Monitor.ProcessMonitorResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Monitor.ProcessMonitorResultResponse}
 */
proto.Monitor.ProcessMonitorResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Monitor.ProcessMonitorResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Monitor.ProcessMonitorResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Monitor.ProcessMonitorResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Monitor.ProcessMonitorResultResponse} returns this
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Monitor.ProcessMonitorResultResponse} returns this
*/
proto.Monitor.ProcessMonitorResultResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Monitor.ProcessMonitorResultResponse} returns this
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Monitor.ProcessMonitorResultResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.Monitor.MonitorStatus = {
  START_STATUS: 0,
  WAITING_STATUS: 1,
  STOP_STATUS: 2,
  FAILED_STATUS: 3
};

/**
 * @enum {number}
 */
proto.Monitor.MonitorResultStatus = {
  RESULT_STATUS_UNKNOWN: 0,
  RESULT_STATUS_PENDING: 1,
  RESULT_STATUS_ACCEPT: 2,
  RESULT_STATUS_REJECT: 3
};

goog.object.extend(exports, proto.Monitor);
