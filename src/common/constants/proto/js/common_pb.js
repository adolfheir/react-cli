// source: common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Common.BehaviorType', null, global);
goog.exportSymbol('proto.Common.ChangeType', null, global);
goog.exportSymbol('proto.Common.CommonErrCode', null, global);
goog.exportSymbol('proto.Common.DataStatus', null, global);
goog.exportSymbol('proto.Common.Error', null, global);
goog.exportSymbol('proto.Common.FrameExtendInfo', null, global);
goog.exportSymbol('proto.Common.Gender', null, global);
goog.exportSymbol('proto.Common.GenderType', null, global);
goog.exportSymbol('proto.Common.GetFeatureRequest', null, global);
goog.exportSymbol('proto.Common.LatLng', null, global);
goog.exportSymbol('proto.Common.NodeStatus', null, global);
goog.exportSymbol('proto.Common.ObjectDataFeature', null, global);
goog.exportSymbol('proto.Common.ObjectDataStatus', null, global);
goog.exportSymbol('proto.Common.ObjectDataType', null, global);
goog.exportSymbol('proto.Common.ObjectFeature', null, global);
goog.exportSymbol('proto.Common.ObjectFeatureResponse', null, global);
goog.exportSymbol('proto.Common.ObjectGroupFeature', null, global);
goog.exportSymbol('proto.Common.ObjectGroupType', null, global);
goog.exportSymbol('proto.Common.ObjectType', null, global);
goog.exportSymbol('proto.Common.OperationType', null, global);
goog.exportSymbol('proto.Common.PedAttrubutes', null, global);
goog.exportSymbol('proto.Common.Point2F', null, global);
goog.exportSymbol('proto.Common.PreProcessError', null, global);
goog.exportSymbol('proto.Common.PreProcessType', null, global);
goog.exportSymbol('proto.Common.Rect2F', null, global);
goog.exportSymbol('proto.Common.SubscribeStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.Point2F = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.Point2F, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.Point2F.displayName = 'proto.Common.Point2F';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.Rect2F = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.Rect2F, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.Rect2F.displayName = 'proto.Common.Rect2F';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.ObjectGroupFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Common.ObjectGroupFeature.repeatedFields_, null);
};
goog.inherits(proto.Common.ObjectGroupFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.ObjectGroupFeature.displayName = 'proto.Common.ObjectGroupFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.ObjectFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Common.ObjectFeature.repeatedFields_, null);
};
goog.inherits(proto.Common.ObjectFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.ObjectFeature.displayName = 'proto.Common.ObjectFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.ObjectFeatureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Common.ObjectFeatureResponse.repeatedFields_, null);
};
goog.inherits(proto.Common.ObjectFeatureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.ObjectFeatureResponse.displayName = 'proto.Common.ObjectFeatureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.ObjectDataFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.ObjectDataFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.ObjectDataFeature.displayName = 'proto.Common.ObjectDataFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.GetFeatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.GetFeatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.GetFeatureRequest.displayName = 'proto.Common.GetFeatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.Error.displayName = 'proto.Common.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.FrameExtendInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.FrameExtendInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.FrameExtendInfo.displayName = 'proto.Common.FrameExtendInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.PedAttrubutes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.PedAttrubutes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.PedAttrubutes.displayName = 'proto.Common.PedAttrubutes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Common.LatLng = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Common.LatLng, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Common.LatLng.displayName = 'proto.Common.LatLng';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.Point2F.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.Point2F.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.Point2F} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.Point2F.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.Point2F}
 */
proto.Common.Point2F.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.Point2F;
  return proto.Common.Point2F.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.Point2F} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.Point2F}
 */
proto.Common.Point2F.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.Point2F.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.Point2F.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.Point2F} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.Point2F.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Common.Point2F.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Common.Point2F} returns this
 */
proto.Common.Point2F.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Common.Point2F.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Common.Point2F} returns this
 */
proto.Common.Point2F.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.Rect2F.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.Rect2F.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.Rect2F} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.Rect2F.toObject = function(includeInstance, msg) {
  var f, obj = {
    topleft: (f = msg.getTopleft()) && proto.Common.Point2F.toObject(includeInstance, f),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.Rect2F}
 */
proto.Common.Rect2F.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.Rect2F;
  return proto.Common.Rect2F.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.Rect2F} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.Rect2F}
 */
proto.Common.Rect2F.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Common.Point2F;
      reader.readMessage(value,proto.Common.Point2F.deserializeBinaryFromReader);
      msg.setTopleft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.Rect2F.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.Rect2F.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.Rect2F} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.Rect2F.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopleft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Common.Point2F.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional Point2F topleft = 1;
 * @return {?proto.Common.Point2F}
 */
proto.Common.Rect2F.prototype.getTopleft = function() {
  return /** @type{?proto.Common.Point2F} */ (
    jspb.Message.getWrapperField(this, proto.Common.Point2F, 1));
};


/**
 * @param {?proto.Common.Point2F|undefined} value
 * @return {!proto.Common.Rect2F} returns this
*/
proto.Common.Rect2F.prototype.setTopleft = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Common.Rect2F} returns this
 */
proto.Common.Rect2F.prototype.clearTopleft = function() {
  return this.setTopleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Common.Rect2F.prototype.hasTopleft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float width = 2;
 * @return {number}
 */
proto.Common.Rect2F.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Common.Rect2F} returns this
 */
proto.Common.Rect2F.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float height = 3;
 * @return {number}
 */
proto.Common.Rect2F.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Common.Rect2F} returns this
 */
proto.Common.Rect2F.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Common.ObjectGroupFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.ObjectGroupFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.ObjectGroupFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.ObjectGroupFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectGroupFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectGroupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objectFeatureListList: jspb.Message.toObjectList(msg.getObjectFeatureListList(),
    proto.Common.ObjectFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.ObjectGroupFeature}
 */
proto.Common.ObjectGroupFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.ObjectGroupFeature;
  return proto.Common.ObjectGroupFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.ObjectGroupFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.ObjectGroupFeature}
 */
proto.Common.ObjectGroupFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setObjectGroupId(value);
      break;
    case 2:
      var value = new proto.Common.ObjectFeature;
      reader.readMessage(value,proto.Common.ObjectFeature.deserializeBinaryFromReader);
      msg.addObjectFeatureList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.ObjectGroupFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.ObjectGroupFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.ObjectGroupFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectGroupFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectGroupId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getObjectFeatureListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Common.ObjectFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 object_group_id = 1;
 * @return {number}
 */
proto.Common.ObjectGroupFeature.prototype.getObjectGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.ObjectGroupFeature} returns this
 */
proto.Common.ObjectGroupFeature.prototype.setObjectGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ObjectFeature object_feature_list = 2;
 * @return {!Array<!proto.Common.ObjectFeature>}
 */
proto.Common.ObjectGroupFeature.prototype.getObjectFeatureListList = function() {
  return /** @type{!Array<!proto.Common.ObjectFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Common.ObjectFeature, 2));
};


/**
 * @param {!Array<!proto.Common.ObjectFeature>} value
 * @return {!proto.Common.ObjectGroupFeature} returns this
*/
proto.Common.ObjectGroupFeature.prototype.setObjectFeatureListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Common.ObjectFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Common.ObjectFeature}
 */
proto.Common.ObjectGroupFeature.prototype.addObjectFeatureList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Common.ObjectFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Common.ObjectGroupFeature} returns this
 */
proto.Common.ObjectGroupFeature.prototype.clearObjectFeatureListList = function() {
  return this.setObjectFeatureListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Common.ObjectFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.ObjectFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.ObjectFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.ObjectFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataFeatureListList: jspb.Message.toObjectList(msg.getDataFeatureListList(),
    proto.Common.ObjectDataFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.ObjectFeature}
 */
proto.Common.ObjectFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.ObjectFeature;
  return proto.Common.ObjectFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.ObjectFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.ObjectFeature}
 */
proto.Common.ObjectFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setObjectId(value);
      break;
    case 2:
      var value = new proto.Common.ObjectDataFeature;
      reader.readMessage(value,proto.Common.ObjectDataFeature.deserializeBinaryFromReader);
      msg.addDataFeatureList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.ObjectFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.ObjectFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.ObjectFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDataFeatureListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Common.ObjectDataFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 object_id = 1;
 * @return {number}
 */
proto.Common.ObjectFeature.prototype.getObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.ObjectFeature} returns this
 */
proto.Common.ObjectFeature.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ObjectDataFeature data_feature_list = 2;
 * @return {!Array<!proto.Common.ObjectDataFeature>}
 */
proto.Common.ObjectFeature.prototype.getDataFeatureListList = function() {
  return /** @type{!Array<!proto.Common.ObjectDataFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Common.ObjectDataFeature, 2));
};


/**
 * @param {!Array<!proto.Common.ObjectDataFeature>} value
 * @return {!proto.Common.ObjectFeature} returns this
*/
proto.Common.ObjectFeature.prototype.setDataFeatureListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Common.ObjectDataFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Common.ObjectDataFeature}
 */
proto.Common.ObjectFeature.prototype.addDataFeatureList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Common.ObjectDataFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Common.ObjectFeature} returns this
 */
proto.Common.ObjectFeature.prototype.clearDataFeatureListList = function() {
  return this.setDataFeatureListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Common.ObjectFeatureResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.ObjectFeatureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.ObjectFeatureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.ObjectFeatureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectFeatureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.Common.Error.toObject(includeInstance, f),
    monitorId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    objectId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dataFeatureListList: jspb.Message.toObjectList(msg.getDataFeatureListList(),
    proto.Common.ObjectDataFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.ObjectFeatureResponse}
 */
proto.Common.ObjectFeatureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.ObjectFeatureResponse;
  return proto.Common.ObjectFeatureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.ObjectFeatureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.ObjectFeatureResponse}
 */
proto.Common.ObjectFeatureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.Common.Error;
      reader.readMessage(value,proto.Common.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitorId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setObjectId(value);
      break;
    case 5:
      var value = new proto.Common.ObjectDataFeature;
      reader.readMessage(value,proto.Common.ObjectDataFeature.deserializeBinaryFromReader);
      msg.addDataFeatureList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.ObjectFeatureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.ObjectFeatureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.ObjectFeatureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectFeatureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Common.Error.serializeBinaryToWriter
    );
  }
  f = message.getMonitorId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getObjectId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDataFeatureListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Common.ObjectDataFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.Common.ObjectFeatureResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common.ObjectFeatureResponse} returns this
 */
proto.Common.ObjectFeatureResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.Common.ObjectFeatureResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, proto.Common.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.Common.ObjectFeatureResponse} returns this
*/
proto.Common.ObjectFeatureResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Common.ObjectFeatureResponse} returns this
 */
proto.Common.ObjectFeatureResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Common.ObjectFeatureResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 monitor_id = 3;
 * @return {number}
 */
proto.Common.ObjectFeatureResponse.prototype.getMonitorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.ObjectFeatureResponse} returns this
 */
proto.Common.ObjectFeatureResponse.prototype.setMonitorId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 object_id = 4;
 * @return {number}
 */
proto.Common.ObjectFeatureResponse.prototype.getObjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.ObjectFeatureResponse} returns this
 */
proto.Common.ObjectFeatureResponse.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated ObjectDataFeature data_feature_list = 5;
 * @return {!Array<!proto.Common.ObjectDataFeature>}
 */
proto.Common.ObjectFeatureResponse.prototype.getDataFeatureListList = function() {
  return /** @type{!Array<!proto.Common.ObjectDataFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Common.ObjectDataFeature, 5));
};


/**
 * @param {!Array<!proto.Common.ObjectDataFeature>} value
 * @return {!proto.Common.ObjectFeatureResponse} returns this
*/
proto.Common.ObjectFeatureResponse.prototype.setDataFeatureListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Common.ObjectDataFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Common.ObjectDataFeature}
 */
proto.Common.ObjectFeatureResponse.prototype.addDataFeatureList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Common.ObjectDataFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Common.ObjectFeatureResponse} returns this
 */
proto.Common.ObjectFeatureResponse.prototype.clearDataFeatureListList = function() {
  return this.setDataFeatureListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.ObjectDataFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.ObjectDataFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.ObjectDataFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectDataFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    feature: msg.getFeature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.ObjectDataFeature}
 */
proto.Common.ObjectDataFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.ObjectDataFeature;
  return proto.Common.ObjectDataFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.ObjectDataFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.ObjectDataFeature}
 */
proto.Common.ObjectDataFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDataId(value);
      break;
    case 2:
      var value = /** @type {!proto.Common.ObjectGroupType} */ (reader.readEnum());
      msg.setGroupType(value);
      break;
    case 3:
      var value = /** @type {!proto.Common.ObjectDataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.ObjectDataFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.ObjectDataFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.ObjectDataFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.ObjectDataFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGroupType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDataType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFeature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 data_id = 1;
 * @return {number}
 */
proto.Common.ObjectDataFeature.prototype.getDataId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.ObjectDataFeature} returns this
 */
proto.Common.ObjectDataFeature.prototype.setDataId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ObjectGroupType group_type = 2;
 * @return {!proto.Common.ObjectGroupType}
 */
proto.Common.ObjectDataFeature.prototype.getGroupType = function() {
  return /** @type {!proto.Common.ObjectGroupType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Common.ObjectGroupType} value
 * @return {!proto.Common.ObjectDataFeature} returns this
 */
proto.Common.ObjectDataFeature.prototype.setGroupType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ObjectDataType data_type = 3;
 * @return {!proto.Common.ObjectDataType}
 */
proto.Common.ObjectDataFeature.prototype.getDataType = function() {
  return /** @type {!proto.Common.ObjectDataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Common.ObjectDataType} value
 * @return {!proto.Common.ObjectDataFeature} returns this
 */
proto.Common.ObjectDataFeature.prototype.setDataType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes feature = 4;
 * @return {string}
 */
proto.Common.ObjectDataFeature.prototype.getFeature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes feature = 4;
 * This is a type-conversion wrapper around `getFeature()`
 * @return {string}
 */
proto.Common.ObjectDataFeature.prototype.getFeature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeature()));
};


/**
 * optional bytes feature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeature()`
 * @return {!Uint8Array}
 */
proto.Common.ObjectDataFeature.prototype.getFeature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Common.ObjectDataFeature} returns this
 */
proto.Common.ObjectDataFeature.prototype.setFeature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.GetFeatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.GetFeatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.GetFeatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.GetFeatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    libId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.GetFeatureRequest}
 */
proto.Common.GetFeatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.GetFeatureRequest;
  return proto.Common.GetFeatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.GetFeatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.GetFeatureRequest}
 */
proto.Common.GetFeatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLibId(value);
      break;
    case 2:
      var value = /** @type {!proto.Common.ObjectGroupType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.GetFeatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.GetFeatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.GetFeatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.GetFeatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLibId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint64 lib_id = 1;
 * @return {number}
 */
proto.Common.GetFeatureRequest.prototype.getLibId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.GetFeatureRequest} returns this
 */
proto.Common.GetFeatureRequest.prototype.setLibId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ObjectGroupType type = 2;
 * @return {!proto.Common.ObjectGroupType}
 */
proto.Common.GetFeatureRequest.prototype.getType = function() {
  return /** @type {!proto.Common.ObjectGroupType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Common.ObjectGroupType} value
 * @return {!proto.Common.GetFeatureRequest} returns this
 */
proto.Common.GetFeatureRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.Error}
 */
proto.Common.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.Error;
  return proto.Common.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.Error}
 */
proto.Common.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Common.CommonErrCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CommonErrCode code = 1;
 * @return {!proto.Common.CommonErrCode}
 */
proto.Common.Error.prototype.getCode = function() {
  return /** @type {!proto.Common.CommonErrCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Common.CommonErrCode} value
 * @return {!proto.Common.Error} returns this
 */
proto.Common.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.Common.Error.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Common.Error} returns this
 */
proto.Common.Error.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.FrameExtendInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.FrameExtendInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.FrameExtendInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.FrameExtendInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    vmsTimeSec: jspb.Message.getFieldWithDefault(msg, 8, 0),
    vmsOffsettimeMs: jspb.Message.getFieldWithDefault(msg, 9, 0),
    frameSign: jspb.Message.getFieldWithDefault(msg, 10, 0),
    originalImgRect: (f = msg.getOriginalImgRect()) && proto.Common.Rect2F.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.FrameExtendInfo}
 */
proto.Common.FrameExtendInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.FrameExtendInfo;
  return proto.Common.FrameExtendInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.FrameExtendInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.FrameExtendInfo}
 */
proto.Common.FrameExtendInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVmsTimeSec(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVmsOffsettimeMs(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameSign(value);
      break;
    case 14:
      var value = new proto.Common.Rect2F;
      reader.readMessage(value,proto.Common.Rect2F.deserializeBinaryFromReader);
      msg.setOriginalImgRect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.FrameExtendInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.FrameExtendInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.FrameExtendInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.FrameExtendInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVmsTimeSec();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getVmsOffsettimeMs();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getFrameSign();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getOriginalImgRect();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.Common.Rect2F.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 vms_time_sec = 8;
 * @return {number}
 */
proto.Common.FrameExtendInfo.prototype.getVmsTimeSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.FrameExtendInfo} returns this
 */
proto.Common.FrameExtendInfo.prototype.setVmsTimeSec = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 vms_offsettime_ms = 9;
 * @return {number}
 */
proto.Common.FrameExtendInfo.prototype.getVmsOffsettimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.FrameExtendInfo} returns this
 */
proto.Common.FrameExtendInfo.prototype.setVmsOffsettimeMs = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 frame_sign = 10;
 * @return {number}
 */
proto.Common.FrameExtendInfo.prototype.getFrameSign = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Common.FrameExtendInfo} returns this
 */
proto.Common.FrameExtendInfo.prototype.setFrameSign = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional Rect2F original_img_rect = 14;
 * @return {?proto.Common.Rect2F}
 */
proto.Common.FrameExtendInfo.prototype.getOriginalImgRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, proto.Common.Rect2F, 14));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.Common.FrameExtendInfo} returns this
*/
proto.Common.FrameExtendInfo.prototype.setOriginalImgRect = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Common.FrameExtendInfo} returns this
 */
proto.Common.FrameExtendInfo.prototype.clearOriginalImgRect = function() {
  return this.setOriginalImgRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Common.FrameExtendInfo.prototype.hasOriginalImgRect = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.PedAttrubutes.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.PedAttrubutes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.PedAttrubutes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.PedAttrubutes.toObject = function(includeInstance, msg) {
  var f, obj = {
    gender: jspb.Message.getFieldWithDefault(msg, 1, 0),
    behavior: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.PedAttrubutes}
 */
proto.Common.PedAttrubutes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.PedAttrubutes;
  return proto.Common.PedAttrubutes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.PedAttrubutes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.PedAttrubutes}
 */
proto.Common.PedAttrubutes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Common.GenderType} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 2:
      var value = /** @type {!proto.Common.BehaviorType} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.PedAttrubutes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.PedAttrubutes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.PedAttrubutes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.PedAttrubutes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGender();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional GenderType gender = 1;
 * @return {!proto.Common.GenderType}
 */
proto.Common.PedAttrubutes.prototype.getGender = function() {
  return /** @type {!proto.Common.GenderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Common.GenderType} value
 * @return {!proto.Common.PedAttrubutes} returns this
 */
proto.Common.PedAttrubutes.prototype.setGender = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BehaviorType behavior = 2;
 * @return {!proto.Common.BehaviorType}
 */
proto.Common.PedAttrubutes.prototype.getBehavior = function() {
  return /** @type {!proto.Common.BehaviorType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Common.BehaviorType} value
 * @return {!proto.Common.PedAttrubutes} returns this
 */
proto.Common.PedAttrubutes.prototype.setBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Common.LatLng.prototype.toObject = function(opt_includeInstance) {
  return proto.Common.LatLng.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Common.LatLng} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.LatLng.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Common.LatLng}
 */
proto.Common.LatLng.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Common.LatLng;
  return proto.Common.LatLng.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Common.LatLng} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Common.LatLng}
 */
proto.Common.LatLng.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Common.LatLng.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Common.LatLng.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Common.LatLng} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Common.LatLng.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.Common.LatLng.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Common.LatLng} returns this
 */
proto.Common.LatLng.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lng = 2;
 * @return {number}
 */
proto.Common.LatLng.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Common.LatLng} returns this
 */
proto.Common.LatLng.prototype.setLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.Common.CommonErrCode = {
  UNKNOW_ERROR: 0,
  STATUS_OK: 200,
  PARAMETER_FAILED: 400,
  CONTENT_NOT_FOUND: 401,
  CONTEXT_CONFLICT: 402,
  INTERNAL_ERROR: 500,
  TIMEOUT: 504,
  SERVICE_NONENTITY: 512,
  SERVICE_NOT_START: 513,
  FEATURE_EXTRACT_FAILED: 600,
  OUT_THE_LIMITED: 700
};

/**
 * @enum {number}
 */
proto.Common.ObjectGroupType = {
  OBJECTGROUPTYPE_NONE: 0,
  OBJECTGROUPTYPE_BODY: 1,
  OBJECTGROUPTYPE_FACE: 2,
  OBJECTGROUPTYPE_CAR: 3
};

/**
 * @enum {number}
 */
proto.Common.ObjectType = {
  OBJECTTYPE_PED: 0,
  OBJECTTYPE_BICYCLE: 1,
  OBJECTTYPE_CAR: 2,
  OBJECTTYPE_MOTORBIKE: 3,
  OBJECTTYPE_AEROPLANE: 4,
  OBJECTTYPE_BUS: 5,
  OBJECTTYPE_TRAIN: 6,
  OBJECTTYPE_TRUCK: 7,
  OBJECTTYPE_ALL: 8,
  OBJECTTYPE_NONE: 9
};

/**
 * @enum {number}
 */
proto.Common.Gender = {
  GENDER_NONE: 0,
  GENDER_MAN: 1,
  GENDER_WOMAN: 2
};

/**
 * @enum {number}
 */
proto.Common.ObjectDataType = {
  OBJECTDATATYPE_IMAGE: 0,
  OBJECTDATATYPE_VIDEO: 1
};

/**
 * @enum {number}
 */
proto.Common.ObjectDataStatus = {
  OBJECTDATASTATUS_NORMAL: 0,
  OBJECTDATASTATUS_ABNORMAL: 1
};

/**
 * @enum {number}
 */
proto.Common.NodeStatus = {
  NODESTATUS_ONLINE: 0,
  NODESTATUS_OFFLINE: 1
};

/**
 * @enum {number}
 */
proto.Common.DataStatus = {
  DATASTATUS_EXIST: 0,
  DATASTATUS_DELETE: 1
};

/**
 * @enum {number}
 */
proto.Common.SubscribeStatus = {
  SUBSCRIBESTATUS_STOP: 0,
  SUBSCRIBESTATUS_START: 1
};

/**
 * @enum {number}
 */
proto.Common.ChangeType = {
  CHANGETYPE_MONITOR: 0,
  CHANGETYPE_OBJECT: 1,
  CHANGETYPE_MONITOR_OBJECT: 2
};

/**
 * @enum {number}
 */
proto.Common.OperationType = {
  OPERATIONTYPE_ADD: 0,
  OPERATIONTYPE_DELETE: 1,
  OPERATIONTYPE_UPDATE: 2,
  OPERATIONTYPE_SELECT: 3
};

/**
 * @enum {number}
 */
proto.Common.GenderType = {
  GENDERTYPE_ALL: 0,
  GENDERTYPE_MALE: 1,
  GENDERTYPE_FEMALE: 2
};

/**
 * @enum {number}
 */
proto.Common.BehaviorType = {
  BEHAVIORTYPE_ALL: 0,
  BEHAVIORTYPE_NORMAL: 1,
  BEHAVIORTYPE_RIDING: 2
};

/**
 * @enum {number}
 */
proto.Common.PreProcessType = {
  OFFLINE: 0,
  HISTORY: 1,
  REALTIME: 2
};

/**
 * @enum {number}
 */
proto.Common.PreProcessError = {
  PRE_PROCESS_ERROR_UNKNOW: 0,
  PRE_PROCESS_ERROR_RUNNING: 1,
  PRE_PROCESS_ERROR_TIME_OUT: 2,
  PRE_PROCESS_ERROR_RESOURCE_TASK_OVER_MAX_NUM: 102,
  PRE_PROCESS_ERROR_PLUGIN_LOAD_FAILED: 201,
  PRE_PROCESS_ERROR_PLUGIN_PLAY_FAIELD: 202,
  PRE_PROCESS_ERROR_STORE_FEATURE_SAVE_FAILED: 303,
  PRE_PROCESS_ERROR_STORTE_IMG_SAVE_FAILED: 304,
  PRE_PROCESS_ERROR_GPUBUFFER_READ_ERROR: 401,
  PRE_PROCESS_ERROR_TIMEOUT_NO_YUVSTREAM: 501,
  PRE_PROCESS_ERROR_CANT_RECOVER: 1000,
  PRE_PROCESS_ERROR_CAMERA_DELETED: 1001,
  PRE_PROCESS_ERROR_RESOURCE_NO_DISK_SPACE: 1002
};

goog.object.extend(exports, proto.Common);
