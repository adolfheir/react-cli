// source: FeatureExtraction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.fe.GetImageFeatureRequest', null, global);
goog.exportSymbol('proto.fe.GetImageFeatureRequest.ImageInfo', null, global);
goog.exportSymbol('proto.fe.GetImageFeatureResponse', null, global);
goog.exportSymbol('proto.fe.GetImageFeatureResponse.ImageFeatureInfo', null, global);
goog.exportSymbol('proto.fe.ProcessingType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fe.GetImageFeatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fe.GetImageFeatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fe.GetImageFeatureRequest.displayName = 'proto.fe.GetImageFeatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fe.GetImageFeatureRequest.ImageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fe.GetImageFeatureRequest.ImageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fe.GetImageFeatureRequest.ImageInfo.displayName = 'proto.fe.GetImageFeatureRequest.ImageInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fe.GetImageFeatureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fe.GetImageFeatureResponse.repeatedFields_, null);
};
goog.inherits(proto.fe.GetImageFeatureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fe.GetImageFeatureResponse.displayName = 'proto.fe.GetImageFeatureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fe.GetImageFeatureResponse.ImageFeatureInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fe.GetImageFeatureResponse.ImageFeatureInfo.displayName = 'proto.fe.GetImageFeatureResponse.ImageFeatureInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fe.GetImageFeatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fe.GetImageFeatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fe.GetImageFeatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageInfo: (f = msg.getImageInfo()) && proto.fe.GetImageFeatureRequest.ImageInfo.toObject(includeInstance, f),
    processType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fe.GetImageFeatureRequest}
 */
proto.fe.GetImageFeatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fe.GetImageFeatureRequest;
  return proto.fe.GetImageFeatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fe.GetImageFeatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fe.GetImageFeatureRequest}
 */
proto.fe.GetImageFeatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fe.GetImageFeatureRequest.ImageInfo;
      reader.readMessage(value,proto.fe.GetImageFeatureRequest.ImageInfo.deserializeBinaryFromReader);
      msg.setImageInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.fe.ProcessingType} */ (reader.readEnum());
      msg.setProcessType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fe.GetImageFeatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fe.GetImageFeatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fe.GetImageFeatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.fe.GetImageFeatureRequest.ImageInfo.serializeBinaryToWriter
    );
  }
  f = message.getProcessType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.fe.GetImageFeatureRequest.ImageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fe.GetImageFeatureRequest.ImageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureRequest.ImageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    images: msg.getImages_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fe.GetImageFeatureRequest.ImageInfo}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fe.GetImageFeatureRequest.ImageInfo;
  return proto.fe.GetImageFeatureRequest.ImageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fe.GetImageFeatureRequest.ImageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fe.GetImageFeatureRequest.ImageInfo}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fe.GetImageFeatureRequest.ImageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fe.GetImageFeatureRequest.ImageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureRequest.ImageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImages_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes images = 1;
 * @return {string}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.prototype.getImages = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes images = 1;
 * This is a type-conversion wrapper around `getImages()`
 * @return {string}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.prototype.getImages_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImages()));
};


/**
 * optional bytes images = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImages()`
 * @return {!Uint8Array}
 */
proto.fe.GetImageFeatureRequest.ImageInfo.prototype.getImages_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImages()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.fe.GetImageFeatureRequest.ImageInfo} returns this
 */
proto.fe.GetImageFeatureRequest.ImageInfo.prototype.setImages = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ImageInfo image_info = 1;
 * @return {?proto.fe.GetImageFeatureRequest.ImageInfo}
 */
proto.fe.GetImageFeatureRequest.prototype.getImageInfo = function() {
  return /** @type{?proto.fe.GetImageFeatureRequest.ImageInfo} */ (
    jspb.Message.getWrapperField(this, proto.fe.GetImageFeatureRequest.ImageInfo, 1));
};


/**
 * @param {?proto.fe.GetImageFeatureRequest.ImageInfo|undefined} value
 * @return {!proto.fe.GetImageFeatureRequest} returns this
*/
proto.fe.GetImageFeatureRequest.prototype.setImageInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fe.GetImageFeatureRequest} returns this
 */
proto.fe.GetImageFeatureRequest.prototype.clearImageInfo = function() {
  return this.setImageInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fe.GetImageFeatureRequest.prototype.hasImageInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProcessingType process_type = 2;
 * @return {!proto.fe.ProcessingType}
 */
proto.fe.GetImageFeatureRequest.prototype.getProcessType = function() {
  return /** @type {!proto.fe.ProcessingType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.fe.ProcessingType} value
 * @return {!proto.fe.GetImageFeatureRequest} returns this
 */
proto.fe.GetImageFeatureRequest.prototype.setProcessType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fe.GetImageFeatureResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fe.GetImageFeatureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fe.GetImageFeatureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fe.GetImageFeatureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    featureInfoList: jspb.Message.toObjectList(msg.getFeatureInfoList(),
    proto.fe.GetImageFeatureResponse.ImageFeatureInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fe.GetImageFeatureResponse}
 */
proto.fe.GetImageFeatureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fe.GetImageFeatureResponse;
  return proto.fe.GetImageFeatureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fe.GetImageFeatureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fe.GetImageFeatureResponse}
 */
proto.fe.GetImageFeatureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.fe.GetImageFeatureResponse.ImageFeatureInfo;
      reader.readMessage(value,proto.fe.GetImageFeatureResponse.ImageFeatureInfo.deserializeBinaryFromReader);
      msg.addFeatureInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fe.GetImageFeatureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fe.GetImageFeatureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fe.GetImageFeatureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getFeatureInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.fe.GetImageFeatureResponse.ImageFeatureInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.fe.GetImageFeatureResponse.ImageFeatureInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    features: msg.getFeatures_asB64(),
    rect: (f = msg.getRect()) && common_pb.Rect2F.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fe.GetImageFeatureResponse.ImageFeatureInfo;
  return proto.fe.GetImageFeatureResponse.ImageFeatureInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Common.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeatures(value);
      break;
    case 3:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fe.GetImageFeatureResponse.ImageFeatureInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFeatures_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
};


/**
 * optional Common.ObjectType object_type = 1;
 * @return {!proto.Common.ObjectType}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.getObjectType = function() {
  return /** @type {!proto.Common.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Common.ObjectType} value
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} returns this
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.setObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes features = 2;
 * @return {string}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.getFeatures = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes features = 2;
 * This is a type-conversion wrapper around `getFeatures()`
 * @return {string}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.getFeatures_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeatures()));
};


/**
 * optional bytes features = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeatures()`
 * @return {!Uint8Array}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.getFeatures_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeatures()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} returns this
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.setFeatures = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Common.Rect2F rect = 3;
 * @return {?proto.Common.Rect2F}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.getRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 3));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} returns this
*/
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.setRect = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo} returns this
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.clearRect = function() {
  return this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fe.GetImageFeatureResponse.ImageFeatureInfo.prototype.hasRect = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.fe.GetImageFeatureResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fe.GetImageFeatureResponse} returns this
 */
proto.fe.GetImageFeatureResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.fe.GetImageFeatureResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.fe.GetImageFeatureResponse} returns this
*/
proto.fe.GetImageFeatureResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fe.GetImageFeatureResponse} returns this
 */
proto.fe.GetImageFeatureResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fe.GetImageFeatureResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ImageFeatureInfo feature_info = 3;
 * @return {!Array<!proto.fe.GetImageFeatureResponse.ImageFeatureInfo>}
 */
proto.fe.GetImageFeatureResponse.prototype.getFeatureInfoList = function() {
  return /** @type{!Array<!proto.fe.GetImageFeatureResponse.ImageFeatureInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fe.GetImageFeatureResponse.ImageFeatureInfo, 3));
};


/**
 * @param {!Array<!proto.fe.GetImageFeatureResponse.ImageFeatureInfo>} value
 * @return {!proto.fe.GetImageFeatureResponse} returns this
*/
proto.fe.GetImageFeatureResponse.prototype.setFeatureInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fe.GetImageFeatureResponse.ImageFeatureInfo}
 */
proto.fe.GetImageFeatureResponse.prototype.addFeatureInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.fe.GetImageFeatureResponse.ImageFeatureInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fe.GetImageFeatureResponse} returns this
 */
proto.fe.GetImageFeatureResponse.prototype.clearFeatureInfoList = function() {
  return this.setFeatureInfoList([]);
};


/**
 * @enum {number}
 */
proto.fe.ProcessingType = {
  PROCESSING_ALL: 0,
  PROCESSING_REID: 1
};

goog.object.extend(exports, proto.fe);
