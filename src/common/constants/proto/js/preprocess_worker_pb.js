// source: preprocess_worker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var device_manager_pb = require('./device_manager_pb.js');
goog.object.extend(proto, device_manager_pb);
goog.exportSymbol('proto.zhst.HistoryTaskParamas', null, global);
goog.exportSymbol('proto.zhst.OfflineTaskParamas', null, global);
goog.exportSymbol('proto.zhst.OnlineTaskParamas', null, global);
goog.exportSymbol('proto.zhst.PathFrameInfo', null, global);
goog.exportSymbol('proto.zhst.PreProcessNodeHeartBeat', null, global);
goog.exportSymbol('proto.zhst.PreProcessNodeStatus', null, global);
goog.exportSymbol('proto.zhst.PreProcessStatusInfo', null, global);
goog.exportSymbol('proto.zhst.RealtimeRectInfo', null, global);
goog.exportSymbol('proto.zhst.StartTaskRequest', null, global);
goog.exportSymbol('proto.zhst.StartTaskResponse', null, global);
goog.exportSymbol('proto.zhst.StopTaskRequest', null, global);
goog.exportSymbol('proto.zhst.StopTaskResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.PreProcessStatusInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.PreProcessStatusInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.PreProcessStatusInfo.displayName = 'proto.zhst.PreProcessStatusInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.PreProcessNodeHeartBeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zhst.PreProcessNodeHeartBeat.repeatedFields_, null);
};
goog.inherits(proto.zhst.PreProcessNodeHeartBeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.PreProcessNodeHeartBeat.displayName = 'proto.zhst.PreProcessNodeHeartBeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.OfflineTaskParamas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.OfflineTaskParamas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.OfflineTaskParamas.displayName = 'proto.zhst.OfflineTaskParamas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.OnlineTaskParamas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.OnlineTaskParamas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.OnlineTaskParamas.displayName = 'proto.zhst.OnlineTaskParamas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.HistoryTaskParamas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.HistoryTaskParamas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.HistoryTaskParamas.displayName = 'proto.zhst.HistoryTaskParamas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.StartTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.StartTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.StartTaskRequest.displayName = 'proto.zhst.StartTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.StartTaskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.StartTaskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.StartTaskResponse.displayName = 'proto.zhst.StartTaskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.StopTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.StopTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.StopTaskRequest.displayName = 'proto.zhst.StopTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.StopTaskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.StopTaskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.StopTaskResponse.displayName = 'proto.zhst.StopTaskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.RealtimeRectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zhst.RealtimeRectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.RealtimeRectInfo.displayName = 'proto.zhst.RealtimeRectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zhst.PathFrameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zhst.PathFrameInfo.repeatedFields_, null);
};
goog.inherits(proto.zhst.PathFrameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zhst.PathFrameInfo.displayName = 'proto.zhst.PathFrameInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.PreProcessStatusInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.PreProcessStatusInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.PreProcessStatusInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.PreProcessStatusInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    thumbnailFilekey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    featureStorePath: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.PreProcessStatusInfo}
 */
proto.zhst.PreProcessStatusInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.PreProcessStatusInfo;
  return proto.zhst.PreProcessStatusInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.PreProcessStatusInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.PreProcessStatusInfo}
 */
proto.zhst.PreProcessStatusInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.Common.PreProcessError} */ (reader.readEnum());
      msg.setTaskStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnailFilekey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureStorePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.PreProcessStatusInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.PreProcessStatusInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.PreProcessStatusInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.PreProcessStatusInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTaskStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getThumbnailFilekey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeatureStorePath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.zhst.PreProcessStatusInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PreProcessStatusInfo} returns this
 */
proto.zhst.PreProcessStatusInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Common.PreProcessError task_status = 2;
 * @return {!proto.Common.PreProcessError}
 */
proto.zhst.PreProcessStatusInfo.prototype.getTaskStatus = function() {
  return /** @type {!proto.Common.PreProcessError} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Common.PreProcessError} value
 * @return {!proto.zhst.PreProcessStatusInfo} returns this
 */
proto.zhst.PreProcessStatusInfo.prototype.setTaskStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float progress = 3;
 * @return {number}
 */
proto.zhst.PreProcessStatusInfo.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PreProcessStatusInfo} returns this
 */
proto.zhst.PreProcessStatusInfo.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string thumbnail_filekey = 4;
 * @return {string}
 */
proto.zhst.PreProcessStatusInfo.prototype.getThumbnailFilekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.PreProcessStatusInfo} returns this
 */
proto.zhst.PreProcessStatusInfo.prototype.setThumbnailFilekey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string feature_store_path = 5;
 * @return {string}
 */
proto.zhst.PreProcessStatusInfo.prototype.getFeatureStorePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.PreProcessStatusInfo} returns this
 */
proto.zhst.PreProcessStatusInfo.prototype.setFeatureStorePath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zhst.PreProcessNodeHeartBeat.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.PreProcessNodeHeartBeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.PreProcessNodeHeartBeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.PreProcessNodeHeartBeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 3, 0),
    free: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    preProcessStatusesList: jspb.Message.toObjectList(msg.getPreProcessStatusesList(),
    proto.zhst.PreProcessStatusInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.PreProcessNodeHeartBeat}
 */
proto.zhst.PreProcessNodeHeartBeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.PreProcessNodeHeartBeat;
  return proto.zhst.PreProcessNodeHeartBeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.PreProcessNodeHeartBeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.PreProcessNodeHeartBeat}
 */
proto.zhst.PreProcessNodeHeartBeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFree(value);
      break;
    case 5:
      var value = /** @type {!proto.zhst.PreProcessNodeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = new proto.zhst.PreProcessStatusInfo;
      reader.readMessage(value,proto.zhst.PreProcessStatusInfo.deserializeBinaryFromReader);
      msg.addPreProcessStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.PreProcessNodeHeartBeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.PreProcessNodeHeartBeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.PreProcessNodeHeartBeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFree();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPreProcessStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.zhst.PreProcessStatusInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 seq = 3;
 * @return {number}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 free = 4;
 * @return {number}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.getFree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.setFree = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PreProcessNodeStatus status = 5;
 * @return {!proto.zhst.PreProcessNodeStatus}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.getStatus = function() {
  return /** @type {!proto.zhst.PreProcessNodeStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.zhst.PreProcessNodeStatus} value
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated PreProcessStatusInfo pre_process_statuses = 6;
 * @return {!Array<!proto.zhst.PreProcessStatusInfo>}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.getPreProcessStatusesList = function() {
  return /** @type{!Array<!proto.zhst.PreProcessStatusInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zhst.PreProcessStatusInfo, 6));
};


/**
 * @param {!Array<!proto.zhst.PreProcessStatusInfo>} value
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
*/
proto.zhst.PreProcessNodeHeartBeat.prototype.setPreProcessStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.zhst.PreProcessStatusInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zhst.PreProcessStatusInfo}
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.addPreProcessStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.zhst.PreProcessStatusInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zhst.PreProcessNodeHeartBeat} returns this
 */
proto.zhst.PreProcessNodeHeartBeat.prototype.clearPreProcessStatusesList = function() {
  return this.setPreProcessStatusesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.OfflineTaskParamas.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.OfflineTaskParamas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.OfflineTaskParamas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.OfflineTaskParamas.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputfile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rect: (f = msg.getRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    modeltype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outputfile: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.OfflineTaskParamas}
 */
proto.zhst.OfflineTaskParamas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.OfflineTaskParamas;
  return proto.zhst.OfflineTaskParamas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.OfflineTaskParamas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.OfflineTaskParamas}
 */
proto.zhst.OfflineTaskParamas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputfile(value);
      break;
    case 2:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModeltype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.OfflineTaskParamas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.OfflineTaskParamas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.OfflineTaskParamas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.OfflineTaskParamas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputfile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getModeltype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutputfile();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string inputFile = 1;
 * @return {string}
 */
proto.zhst.OfflineTaskParamas.prototype.getInputfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.OfflineTaskParamas} returns this
 */
proto.zhst.OfflineTaskParamas.prototype.setInputfile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Rect2F rect = 2;
 * @return {?proto.Common.Rect2F}
 */
proto.zhst.OfflineTaskParamas.prototype.getRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 2));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.zhst.OfflineTaskParamas} returns this
*/
proto.zhst.OfflineTaskParamas.prototype.setRect = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.OfflineTaskParamas} returns this
 */
proto.zhst.OfflineTaskParamas.prototype.clearRect = function() {
  return this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.OfflineTaskParamas.prototype.hasRect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string modelType = 3;
 * @return {string}
 */
proto.zhst.OfflineTaskParamas.prototype.getModeltype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.OfflineTaskParamas} returns this
 */
proto.zhst.OfflineTaskParamas.prototype.setModeltype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string outputFile = 4;
 * @return {string}
 */
proto.zhst.OfflineTaskParamas.prototype.getOutputfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.OfflineTaskParamas} returns this
 */
proto.zhst.OfflineTaskParamas.prototype.setOutputfile = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.OnlineTaskParamas.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.OnlineTaskParamas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.OnlineTaskParamas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.OnlineTaskParamas.toObject = function(includeInstance, msg) {
  var f, obj = {
    camera: (f = msg.getCamera()) && device_manager_pb.Camera.toObject(includeInstance, f),
    outputfile: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.OnlineTaskParamas}
 */
proto.zhst.OnlineTaskParamas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.OnlineTaskParamas;
  return proto.zhst.OnlineTaskParamas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.OnlineTaskParamas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.OnlineTaskParamas}
 */
proto.zhst.OnlineTaskParamas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new device_manager_pb.Camera;
      reader.readMessage(value,device_manager_pb.Camera.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.OnlineTaskParamas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.OnlineTaskParamas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.OnlineTaskParamas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.OnlineTaskParamas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      device_manager_pb.Camera.serializeBinaryToWriter
    );
  }
  f = message.getOutputfile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Camera camera = 1;
 * @return {?proto.zhst.Camera}
 */
proto.zhst.OnlineTaskParamas.prototype.getCamera = function() {
  return /** @type{?proto.zhst.Camera} */ (
    jspb.Message.getWrapperField(this, device_manager_pb.Camera, 1));
};


/**
 * @param {?proto.zhst.Camera|undefined} value
 * @return {!proto.zhst.OnlineTaskParamas} returns this
*/
proto.zhst.OnlineTaskParamas.prototype.setCamera = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.OnlineTaskParamas} returns this
 */
proto.zhst.OnlineTaskParamas.prototype.clearCamera = function() {
  return this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.OnlineTaskParamas.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string outputFile = 2;
 * @return {string}
 */
proto.zhst.OnlineTaskParamas.prototype.getOutputfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.OnlineTaskParamas} returns this
 */
proto.zhst.OnlineTaskParamas.prototype.setOutputfile = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.HistoryTaskParamas.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.HistoryTaskParamas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.HistoryTaskParamas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.HistoryTaskParamas.toObject = function(includeInstance, msg) {
  var f, obj = {
    camera: (f = msg.getCamera()) && device_manager_pb.Camera.toObject(includeInstance, f),
    outputfile: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beginTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.HistoryTaskParamas}
 */
proto.zhst.HistoryTaskParamas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.HistoryTaskParamas;
  return proto.zhst.HistoryTaskParamas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.HistoryTaskParamas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.HistoryTaskParamas}
 */
proto.zhst.HistoryTaskParamas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new device_manager_pb.Camera;
      reader.readMessage(value,device_manager_pb.Camera.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputfile(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBeginTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.HistoryTaskParamas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.HistoryTaskParamas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.HistoryTaskParamas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.HistoryTaskParamas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      device_manager_pb.Camera.serializeBinaryToWriter
    );
  }
  f = message.getOutputfile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeginTime();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional Camera camera = 1;
 * @return {?proto.zhst.Camera}
 */
proto.zhst.HistoryTaskParamas.prototype.getCamera = function() {
  return /** @type{?proto.zhst.Camera} */ (
    jspb.Message.getWrapperField(this, device_manager_pb.Camera, 1));
};


/**
 * @param {?proto.zhst.Camera|undefined} value
 * @return {!proto.zhst.HistoryTaskParamas} returns this
*/
proto.zhst.HistoryTaskParamas.prototype.setCamera = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.HistoryTaskParamas} returns this
 */
proto.zhst.HistoryTaskParamas.prototype.clearCamera = function() {
  return this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.HistoryTaskParamas.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string outputFile = 2;
 * @return {string}
 */
proto.zhst.HistoryTaskParamas.prototype.getOutputfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.HistoryTaskParamas} returns this
 */
proto.zhst.HistoryTaskParamas.prototype.setOutputfile = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 begin_time = 5;
 * @return {number}
 */
proto.zhst.HistoryTaskParamas.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.HistoryTaskParamas} returns this
 */
proto.zhst.HistoryTaskParamas.prototype.setBeginTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 end_time = 6;
 * @return {number}
 */
proto.zhst.HistoryTaskParamas.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.HistoryTaskParamas} returns this
 */
proto.zhst.HistoryTaskParamas.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.StartTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.StartTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.StartTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StartTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offlineparamas: (f = msg.getOfflineparamas()) && proto.zhst.OfflineTaskParamas.toObject(includeInstance, f),
    onlineparamas: (f = msg.getOnlineparamas()) && proto.zhst.OnlineTaskParamas.toObject(includeInstance, f),
    historyparamas: (f = msg.getHistoryparamas()) && proto.zhst.HistoryTaskParamas.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.StartTaskRequest}
 */
proto.zhst.StartTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.StartTaskRequest;
  return proto.zhst.StartTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.StartTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.StartTaskRequest}
 */
proto.zhst.StartTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTaskId(value);
      break;
    case 2:
      var value = new proto.zhst.OfflineTaskParamas;
      reader.readMessage(value,proto.zhst.OfflineTaskParamas.deserializeBinaryFromReader);
      msg.setOfflineparamas(value);
      break;
    case 3:
      var value = new proto.zhst.OnlineTaskParamas;
      reader.readMessage(value,proto.zhst.OnlineTaskParamas.deserializeBinaryFromReader);
      msg.setOnlineparamas(value);
      break;
    case 4:
      var value = new proto.zhst.HistoryTaskParamas;
      reader.readMessage(value,proto.zhst.HistoryTaskParamas.deserializeBinaryFromReader);
      msg.setHistoryparamas(value);
      break;
    case 5:
      var value = /** @type {!proto.Common.PreProcessType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.StartTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.StartTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.StartTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StartTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOfflineparamas();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zhst.OfflineTaskParamas.serializeBinaryToWriter
    );
  }
  f = message.getOnlineparamas();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.zhst.OnlineTaskParamas.serializeBinaryToWriter
    );
  }
  f = message.getHistoryparamas();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.zhst.HistoryTaskParamas.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint64 task_id = 1;
 * @return {number}
 */
proto.zhst.StartTaskRequest.prototype.getTaskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.StartTaskRequest} returns this
 */
proto.zhst.StartTaskRequest.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional OfflineTaskParamas offlineParamas = 2;
 * @return {?proto.zhst.OfflineTaskParamas}
 */
proto.zhst.StartTaskRequest.prototype.getOfflineparamas = function() {
  return /** @type{?proto.zhst.OfflineTaskParamas} */ (
    jspb.Message.getWrapperField(this, proto.zhst.OfflineTaskParamas, 2));
};


/**
 * @param {?proto.zhst.OfflineTaskParamas|undefined} value
 * @return {!proto.zhst.StartTaskRequest} returns this
*/
proto.zhst.StartTaskRequest.prototype.setOfflineparamas = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.StartTaskRequest} returns this
 */
proto.zhst.StartTaskRequest.prototype.clearOfflineparamas = function() {
  return this.setOfflineparamas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.StartTaskRequest.prototype.hasOfflineparamas = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OnlineTaskParamas onlineParamas = 3;
 * @return {?proto.zhst.OnlineTaskParamas}
 */
proto.zhst.StartTaskRequest.prototype.getOnlineparamas = function() {
  return /** @type{?proto.zhst.OnlineTaskParamas} */ (
    jspb.Message.getWrapperField(this, proto.zhst.OnlineTaskParamas, 3));
};


/**
 * @param {?proto.zhst.OnlineTaskParamas|undefined} value
 * @return {!proto.zhst.StartTaskRequest} returns this
*/
proto.zhst.StartTaskRequest.prototype.setOnlineparamas = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.StartTaskRequest} returns this
 */
proto.zhst.StartTaskRequest.prototype.clearOnlineparamas = function() {
  return this.setOnlineparamas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.StartTaskRequest.prototype.hasOnlineparamas = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HistoryTaskParamas historyParamas = 4;
 * @return {?proto.zhst.HistoryTaskParamas}
 */
proto.zhst.StartTaskRequest.prototype.getHistoryparamas = function() {
  return /** @type{?proto.zhst.HistoryTaskParamas} */ (
    jspb.Message.getWrapperField(this, proto.zhst.HistoryTaskParamas, 4));
};


/**
 * @param {?proto.zhst.HistoryTaskParamas|undefined} value
 * @return {!proto.zhst.StartTaskRequest} returns this
*/
proto.zhst.StartTaskRequest.prototype.setHistoryparamas = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.StartTaskRequest} returns this
 */
proto.zhst.StartTaskRequest.prototype.clearHistoryparamas = function() {
  return this.setHistoryparamas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.StartTaskRequest.prototype.hasHistoryparamas = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Common.PreProcessType type = 5;
 * @return {!proto.Common.PreProcessType}
 */
proto.zhst.StartTaskRequest.prototype.getType = function() {
  return /** @type {!proto.Common.PreProcessType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Common.PreProcessType} value
 * @return {!proto.zhst.StartTaskRequest} returns this
 */
proto.zhst.StartTaskRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.StartTaskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.StartTaskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.StartTaskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StartTaskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.StartTaskResponse}
 */
proto.zhst.StartTaskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.StartTaskResponse;
  return proto.zhst.StartTaskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.StartTaskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.StartTaskResponse}
 */
proto.zhst.StartTaskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.StartTaskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.StartTaskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.StartTaskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StartTaskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.zhst.StartTaskResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.StartTaskResponse} returns this
 */
proto.zhst.StartTaskResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.zhst.StartTaskResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.zhst.StartTaskResponse} returns this
*/
proto.zhst.StartTaskResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.StartTaskResponse} returns this
 */
proto.zhst.StartTaskResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.StartTaskResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.StopTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.StopTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.StopTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StopTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.StopTaskRequest}
 */
proto.zhst.StopTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.StopTaskRequest;
  return proto.zhst.StopTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.StopTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.StopTaskRequest}
 */
proto.zhst.StopTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.StopTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.StopTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.StopTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StopTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 task_id = 1;
 * @return {number}
 */
proto.zhst.StopTaskRequest.prototype.getTaskId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.StopTaskRequest} returns this
 */
proto.zhst.StopTaskRequest.prototype.setTaskId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.StopTaskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.StopTaskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.StopTaskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StopTaskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.StopTaskResponse}
 */
proto.zhst.StopTaskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.StopTaskResponse;
  return proto.zhst.StopTaskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.StopTaskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.StopTaskResponse}
 */
proto.zhst.StopTaskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.StopTaskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.StopTaskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.StopTaskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.StopTaskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.zhst.StopTaskResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.StopTaskResponse} returns this
 */
proto.zhst.StopTaskResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.zhst.StopTaskResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.zhst.StopTaskResponse} returns this
*/
proto.zhst.StopTaskResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.StopTaskResponse} returns this
 */
proto.zhst.StopTaskResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.StopTaskResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.RealtimeRectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.RealtimeRectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.RealtimeRectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.RealtimeRectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcRect: (f = msg.getSrcRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    extendRect: (f = msg.getExtendRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    feature: msg.getFeature_asB64(),
    pathId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    imgUuid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    objNum: jspb.Message.getFieldWithDefault(msg, 8, 0),
    frameTimestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    columnFamilyName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    frameVmsTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    frameVmsOffsettime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    originalImgRect: (f = msg.getOriginalImgRect()) && common_pb.Rect2F.toObject(includeInstance, f),
    featureId: jspb.Message.getFieldWithDefault(msg, 15, 0),
    isfirstofpath: jspb.Message.getFieldWithDefault(msg, 16, 0),
    frameSign: jspb.Message.getFieldWithDefault(msg, 23, 0),
    s3Key: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.RealtimeRectInfo}
 */
proto.zhst.RealtimeRectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.RealtimeRectInfo;
  return proto.zhst.RealtimeRectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.RealtimeRectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.RealtimeRectInfo}
 */
proto.zhst.RealtimeRectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setSrcRect(value);
      break;
    case 2:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setExtendRect(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathId(value);
      break;
    case 5:
      var value = /** @type {!proto.Common.ObjectType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgUuid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObjNum(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameTimestamp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnFamilyName(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameVmsTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameVmsOffsettime(value);
      break;
    case 14:
      var value = new common_pb.Rect2F;
      reader.readMessage(value,common_pb.Rect2F.deserializeBinaryFromReader);
      msg.setOriginalImgRect(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeatureId(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsfirstofpath(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameSign(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3Key(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.RealtimeRectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.RealtimeRectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.RealtimeRectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.RealtimeRectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcRect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getExtendRect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getFeature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPathId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getImgUuid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getObjNum();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getFrameTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getColumnFamilyName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFrameVmsTime();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getFrameVmsOffsettime();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getOriginalImgRect();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      common_pb.Rect2F.serializeBinaryToWriter
    );
  }
  f = message.getFeatureId();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getIsfirstofpath();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getFrameSign();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getS3Key();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional Common.Rect2F src_rect = 1;
 * @return {?proto.Common.Rect2F}
 */
proto.zhst.RealtimeRectInfo.prototype.getSrcRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 1));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
*/
proto.zhst.RealtimeRectInfo.prototype.setSrcRect = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.clearSrcRect = function() {
  return this.setSrcRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.RealtimeRectInfo.prototype.hasSrcRect = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Common.Rect2F extend_rect = 2;
 * @return {?proto.Common.Rect2F}
 */
proto.zhst.RealtimeRectInfo.prototype.getExtendRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 2));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
*/
proto.zhst.RealtimeRectInfo.prototype.setExtendRect = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.clearExtendRect = function() {
  return this.setExtendRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.RealtimeRectInfo.prototype.hasExtendRect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes feature = 3;
 * @return {string}
 */
proto.zhst.RealtimeRectInfo.prototype.getFeature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes feature = 3;
 * This is a type-conversion wrapper around `getFeature()`
 * @return {string}
 */
proto.zhst.RealtimeRectInfo.prototype.getFeature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeature()));
};


/**
 * optional bytes feature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeature()`
 * @return {!Uint8Array}
 */
proto.zhst.RealtimeRectInfo.prototype.getFeature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setFeature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string path_id = 4;
 * @return {string}
 */
proto.zhst.RealtimeRectInfo.prototype.getPathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setPathId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Common.ObjectType type = 5;
 * @return {!proto.Common.ObjectType}
 */
proto.zhst.RealtimeRectInfo.prototype.getType = function() {
  return /** @type {!proto.Common.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Common.ObjectType} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional float confidence = 6;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string img_uuid = 7;
 * @return {string}
 */
proto.zhst.RealtimeRectInfo.prototype.getImgUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setImgUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 obj_num = 8;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getObjNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setObjNum = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 frame_timestamp = 9;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getFrameTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setFrameTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string column_family_name = 10;
 * @return {string}
 */
proto.zhst.RealtimeRectInfo.prototype.getColumnFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setColumnFamilyName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 frame_vms_time = 11;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getFrameVmsTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setFrameVmsTime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 frame_vms_offsettime = 12;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getFrameVmsOffsettime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setFrameVmsOffsettime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional Common.Rect2F original_img_rect = 14;
 * @return {?proto.Common.Rect2F}
 */
proto.zhst.RealtimeRectInfo.prototype.getOriginalImgRect = function() {
  return /** @type{?proto.Common.Rect2F} */ (
    jspb.Message.getWrapperField(this, common_pb.Rect2F, 14));
};


/**
 * @param {?proto.Common.Rect2F|undefined} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
*/
proto.zhst.RealtimeRectInfo.prototype.setOriginalImgRect = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.clearOriginalImgRect = function() {
  return this.setOriginalImgRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zhst.RealtimeRectInfo.prototype.hasOriginalImgRect = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int64 feature_id = 15;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getFeatureId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setFeatureId = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 isFirstOfPath = 16;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getIsfirstofpath = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setIsfirstofpath = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint64 frame_sign = 23;
 * @return {number}
 */
proto.zhst.RealtimeRectInfo.prototype.getFrameSign = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setFrameSign = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string s3_key = 24;
 * @return {string}
 */
proto.zhst.RealtimeRectInfo.prototype.getS3Key = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.RealtimeRectInfo} returns this
 */
proto.zhst.RealtimeRectInfo.prototype.setS3Key = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zhst.PathFrameInfo.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zhst.PathFrameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zhst.PathFrameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zhst.PathFrameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.PathFrameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frameTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    realtimepathsList: jspb.Message.toObjectList(msg.getRealtimepathsList(),
    proto.zhst.RealtimeRectInfo.toObject, includeInstance),
    endpathidList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    taskid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zhst.PathFrameInfo}
 */
proto.zhst.PathFrameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zhst.PathFrameInfo;
  return proto.zhst.PathFrameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zhst.PathFrameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zhst.PathFrameInfo}
 */
proto.zhst.PathFrameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameTimestamp(value);
      break;
    case 3:
      var value = new proto.zhst.RealtimeRectInfo;
      reader.readMessage(value,proto.zhst.RealtimeRectInfo.deserializeBinaryFromReader);
      msg.addRealtimepaths(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addEndpathid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zhst.PathFrameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zhst.PathFrameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zhst.PathFrameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zhst.PathFrameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrameId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFrameTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRealtimepathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.zhst.RealtimeRectInfo.serializeBinaryToWriter
    );
  }
  f = message.getEndpathidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTaskid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 frame_id = 1;
 * @return {number}
 */
proto.zhst.PathFrameInfo.prototype.getFrameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.setFrameId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 frame_timestamp = 2;
 * @return {number}
 */
proto.zhst.PathFrameInfo.prototype.getFrameTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.setFrameTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated RealtimeRectInfo realtimePaths = 3;
 * @return {!Array<!proto.zhst.RealtimeRectInfo>}
 */
proto.zhst.PathFrameInfo.prototype.getRealtimepathsList = function() {
  return /** @type{!Array<!proto.zhst.RealtimeRectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zhst.RealtimeRectInfo, 3));
};


/**
 * @param {!Array<!proto.zhst.RealtimeRectInfo>} value
 * @return {!proto.zhst.PathFrameInfo} returns this
*/
proto.zhst.PathFrameInfo.prototype.setRealtimepathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.zhst.RealtimeRectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zhst.RealtimeRectInfo}
 */
proto.zhst.PathFrameInfo.prototype.addRealtimepaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.zhst.RealtimeRectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.clearRealtimepathsList = function() {
  return this.setRealtimepathsList([]);
};


/**
 * repeated string endPathId = 4;
 * @return {!Array<string>}
 */
proto.zhst.PathFrameInfo.prototype.getEndpathidList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.setEndpathidList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.addEndpathid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.clearEndpathidList = function() {
  return this.setEndpathidList([]);
};


/**
 * optional string taskId = 5;
 * @return {string}
 */
proto.zhst.PathFrameInfo.prototype.getTaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zhst.PathFrameInfo} returns this
 */
proto.zhst.PathFrameInfo.prototype.setTaskid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.zhst.PreProcessNodeStatus = {
  RUNNING: 0,
  OD_INIT_FAILED: 1,
  TINY_REID_INIT_FAILED: 2,
  REID_INIT_FAILED: 3,
  NSQ_CONNECT_FAILED: 4,
  IMAGE_SERVER_CONNECT_FAILED: 5,
  NO_POD_IP: 6,
  READ_CONFIG_FAILED: 7,
  GPU_GET_FAILED: 8,
  NO_DISK_SPACE: 9
};

goog.object.extend(exports, proto.zhst);
