// source: social_monitor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.SocialMonitor.CameraPoint', null, global);
goog.exportSymbol('proto.SocialMonitor.ClueTrail', null, global);
goog.exportSymbol('proto.SocialMonitor.ClueTrailItem', null, global);
goog.exportSymbol('proto.SocialMonitor.GetCameraPointRequest', null, global);
goog.exportSymbol('proto.SocialMonitor.GetCameraPointResponse', null, global);
goog.exportSymbol('proto.SocialMonitor.GetClueTrailRequest', null, global);
goog.exportSymbol('proto.SocialMonitor.GetClueTrailResponse', null, global);
goog.exportSymbol('proto.SocialMonitor.PYRPoint', null, global);
goog.exportSymbol('proto.SocialMonitor.PutCameraPointRequest', null, global);
goog.exportSymbol('proto.SocialMonitor.PutCameraPointResponse', null, global);
goog.exportSymbol('proto.SocialMonitor.PutClueTrailRequest', null, global);
goog.exportSymbol('proto.SocialMonitor.PutClueTrailResponse', null, global);
goog.exportSymbol('proto.SocialMonitor.XYZPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.XYZPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMonitor.XYZPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.XYZPoint.displayName = 'proto.SocialMonitor.XYZPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.PYRPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMonitor.PYRPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.PYRPoint.displayName = 'proto.SocialMonitor.PYRPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.CameraPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMonitor.CameraPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.CameraPoint.displayName = 'proto.SocialMonitor.CameraPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.ClueTrailItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMonitor.ClueTrailItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.ClueTrailItem.displayName = 'proto.SocialMonitor.ClueTrailItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.ClueTrail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.ClueTrail.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.ClueTrail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.ClueTrail.displayName = 'proto.SocialMonitor.ClueTrail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.PutCameraPointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.PutCameraPointRequest.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.PutCameraPointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.PutCameraPointRequest.displayName = 'proto.SocialMonitor.PutCameraPointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.PutCameraPointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMonitor.PutCameraPointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.PutCameraPointResponse.displayName = 'proto.SocialMonitor.PutCameraPointResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.PutClueTrailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.PutClueTrailRequest.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.PutClueTrailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.PutClueTrailRequest.displayName = 'proto.SocialMonitor.PutClueTrailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.PutClueTrailResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SocialMonitor.PutClueTrailResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.PutClueTrailResponse.displayName = 'proto.SocialMonitor.PutClueTrailResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.GetCameraPointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.GetCameraPointRequest.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.GetCameraPointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.GetCameraPointRequest.displayName = 'proto.SocialMonitor.GetCameraPointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.GetCameraPointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.GetCameraPointResponse.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.GetCameraPointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.GetCameraPointResponse.displayName = 'proto.SocialMonitor.GetCameraPointResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.GetClueTrailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.GetClueTrailRequest.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.GetClueTrailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.GetClueTrailRequest.displayName = 'proto.SocialMonitor.GetClueTrailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SocialMonitor.GetClueTrailResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SocialMonitor.GetClueTrailResponse.repeatedFields_, null);
};
goog.inherits(proto.SocialMonitor.GetClueTrailResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SocialMonitor.GetClueTrailResponse.displayName = 'proto.SocialMonitor.GetClueTrailResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.XYZPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.XYZPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.XYZPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.XYZPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.XYZPoint}
 */
proto.SocialMonitor.XYZPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.XYZPoint;
  return proto.SocialMonitor.XYZPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.XYZPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.XYZPoint}
 */
proto.SocialMonitor.XYZPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.XYZPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.XYZPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.XYZPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.XYZPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.SocialMonitor.XYZPoint.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.XYZPoint} returns this
 */
proto.SocialMonitor.XYZPoint.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.SocialMonitor.XYZPoint.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.XYZPoint} returns this
 */
proto.SocialMonitor.XYZPoint.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.SocialMonitor.XYZPoint.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.XYZPoint} returns this
 */
proto.SocialMonitor.XYZPoint.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.PYRPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.PYRPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.PYRPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PYRPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    roll: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.PYRPoint}
 */
proto.SocialMonitor.PYRPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.PYRPoint;
  return proto.SocialMonitor.PYRPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.PYRPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.PYRPoint}
 */
proto.SocialMonitor.PYRPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYaw(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.PYRPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.PYRPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.PYRPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PYRPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRoll();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float pitch = 1;
 * @return {number}
 */
proto.SocialMonitor.PYRPoint.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.PYRPoint} returns this
 */
proto.SocialMonitor.PYRPoint.prototype.setPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float yaw = 2;
 * @return {number}
 */
proto.SocialMonitor.PYRPoint.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.PYRPoint} returns this
 */
proto.SocialMonitor.PYRPoint.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float roll = 3;
 * @return {number}
 */
proto.SocialMonitor.PYRPoint.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.PYRPoint} returns this
 */
proto.SocialMonitor.PYRPoint.prototype.setRoll = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.CameraPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.CameraPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.CameraPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.CameraPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cameraAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    monitorlocation: (f = msg.getMonitorlocation()) && proto.SocialMonitor.XYZPoint.toObject(includeInstance, f),
    monitorrotation: (f = msg.getMonitorrotation()) && proto.SocialMonitor.XYZPoint.toObject(includeInstance, f),
    cameralocation: (f = msg.getCameralocation()) && proto.SocialMonitor.XYZPoint.toObject(includeInstance, f),
    camerarotation: (f = msg.getCamerarotation()) && proto.SocialMonitor.PYRPoint.toObject(includeInstance, f),
    fovangle: jspb.Message.getFieldWithDefault(msg, 7, 0),
    projectionlocation: (f = msg.getProjectionlocation()) && proto.SocialMonitor.XYZPoint.toObject(includeInstance, f),
    projectionrotation: (f = msg.getProjectionrotation()) && proto.SocialMonitor.PYRPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.CameraPoint}
 */
proto.SocialMonitor.CameraPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.CameraPoint;
  return proto.SocialMonitor.CameraPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.CameraPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.CameraPoint}
 */
proto.SocialMonitor.CameraPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraAddress(value);
      break;
    case 3:
      var value = new proto.SocialMonitor.XYZPoint;
      reader.readMessage(value,proto.SocialMonitor.XYZPoint.deserializeBinaryFromReader);
      msg.setMonitorlocation(value);
      break;
    case 4:
      var value = new proto.SocialMonitor.XYZPoint;
      reader.readMessage(value,proto.SocialMonitor.XYZPoint.deserializeBinaryFromReader);
      msg.setMonitorrotation(value);
      break;
    case 5:
      var value = new proto.SocialMonitor.XYZPoint;
      reader.readMessage(value,proto.SocialMonitor.XYZPoint.deserializeBinaryFromReader);
      msg.setCameralocation(value);
      break;
    case 6:
      var value = new proto.SocialMonitor.PYRPoint;
      reader.readMessage(value,proto.SocialMonitor.PYRPoint.deserializeBinaryFromReader);
      msg.setCamerarotation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFovangle(value);
      break;
    case 8:
      var value = new proto.SocialMonitor.XYZPoint;
      reader.readMessage(value,proto.SocialMonitor.XYZPoint.deserializeBinaryFromReader);
      msg.setProjectionlocation(value);
      break;
    case 9:
      var value = new proto.SocialMonitor.PYRPoint;
      reader.readMessage(value,proto.SocialMonitor.PYRPoint.deserializeBinaryFromReader);
      msg.setProjectionrotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.CameraPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.CameraPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.CameraPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.CameraPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCameraAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMonitorlocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SocialMonitor.XYZPoint.serializeBinaryToWriter
    );
  }
  f = message.getMonitorrotation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SocialMonitor.XYZPoint.serializeBinaryToWriter
    );
  }
  f = message.getCameralocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SocialMonitor.XYZPoint.serializeBinaryToWriter
    );
  }
  f = message.getCamerarotation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SocialMonitor.PYRPoint.serializeBinaryToWriter
    );
  }
  f = message.getFovangle();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getProjectionlocation();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SocialMonitor.XYZPoint.serializeBinaryToWriter
    );
  }
  f = message.getProjectionrotation();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.SocialMonitor.PYRPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 camera_id = 1;
 * @return {number}
 */
proto.SocialMonitor.CameraPoint.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string camera_address = 2;
 * @return {string}
 */
proto.SocialMonitor.CameraPoint.prototype.getCameraAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.setCameraAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional XYZPoint monitorLocation = 3;
 * @return {?proto.SocialMonitor.XYZPoint}
 */
proto.SocialMonitor.CameraPoint.prototype.getMonitorlocation = function() {
  return /** @type{?proto.SocialMonitor.XYZPoint} */ (
    jspb.Message.getWrapperField(this, proto.SocialMonitor.XYZPoint, 3));
};


/**
 * @param {?proto.SocialMonitor.XYZPoint|undefined} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
*/
proto.SocialMonitor.CameraPoint.prototype.setMonitorlocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.clearMonitorlocation = function() {
  return this.setMonitorlocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.CameraPoint.prototype.hasMonitorlocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional XYZPoint monitorRotation = 4;
 * @return {?proto.SocialMonitor.XYZPoint}
 */
proto.SocialMonitor.CameraPoint.prototype.getMonitorrotation = function() {
  return /** @type{?proto.SocialMonitor.XYZPoint} */ (
    jspb.Message.getWrapperField(this, proto.SocialMonitor.XYZPoint, 4));
};


/**
 * @param {?proto.SocialMonitor.XYZPoint|undefined} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
*/
proto.SocialMonitor.CameraPoint.prototype.setMonitorrotation = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.clearMonitorrotation = function() {
  return this.setMonitorrotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.CameraPoint.prototype.hasMonitorrotation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional XYZPoint cameraLocation = 5;
 * @return {?proto.SocialMonitor.XYZPoint}
 */
proto.SocialMonitor.CameraPoint.prototype.getCameralocation = function() {
  return /** @type{?proto.SocialMonitor.XYZPoint} */ (
    jspb.Message.getWrapperField(this, proto.SocialMonitor.XYZPoint, 5));
};


/**
 * @param {?proto.SocialMonitor.XYZPoint|undefined} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
*/
proto.SocialMonitor.CameraPoint.prototype.setCameralocation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.clearCameralocation = function() {
  return this.setCameralocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.CameraPoint.prototype.hasCameralocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PYRPoint cameraRotation = 6;
 * @return {?proto.SocialMonitor.PYRPoint}
 */
proto.SocialMonitor.CameraPoint.prototype.getCamerarotation = function() {
  return /** @type{?proto.SocialMonitor.PYRPoint} */ (
    jspb.Message.getWrapperField(this, proto.SocialMonitor.PYRPoint, 6));
};


/**
 * @param {?proto.SocialMonitor.PYRPoint|undefined} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
*/
proto.SocialMonitor.CameraPoint.prototype.setCamerarotation = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.clearCamerarotation = function() {
  return this.setCamerarotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.CameraPoint.prototype.hasCamerarotation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 fovAngle = 7;
 * @return {number}
 */
proto.SocialMonitor.CameraPoint.prototype.getFovangle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.setFovangle = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional XYZPoint projectionLocation = 8;
 * @return {?proto.SocialMonitor.XYZPoint}
 */
proto.SocialMonitor.CameraPoint.prototype.getProjectionlocation = function() {
  return /** @type{?proto.SocialMonitor.XYZPoint} */ (
    jspb.Message.getWrapperField(this, proto.SocialMonitor.XYZPoint, 8));
};


/**
 * @param {?proto.SocialMonitor.XYZPoint|undefined} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
*/
proto.SocialMonitor.CameraPoint.prototype.setProjectionlocation = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.clearProjectionlocation = function() {
  return this.setProjectionlocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.CameraPoint.prototype.hasProjectionlocation = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PYRPoint projectionRotation = 9;
 * @return {?proto.SocialMonitor.PYRPoint}
 */
proto.SocialMonitor.CameraPoint.prototype.getProjectionrotation = function() {
  return /** @type{?proto.SocialMonitor.PYRPoint} */ (
    jspb.Message.getWrapperField(this, proto.SocialMonitor.PYRPoint, 9));
};


/**
 * @param {?proto.SocialMonitor.PYRPoint|undefined} value
 * @return {!proto.SocialMonitor.CameraPoint} returns this
*/
proto.SocialMonitor.CameraPoint.prototype.setProjectionrotation = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.CameraPoint} returns this
 */
proto.SocialMonitor.CameraPoint.prototype.clearProjectionrotation = function() {
  return this.setProjectionrotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.CameraPoint.prototype.hasProjectionrotation = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.ClueTrailItem.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.ClueTrailItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.ClueTrailItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.ClueTrailItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pathId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    features: msg.getFeatures_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.ClueTrailItem}
 */
proto.SocialMonitor.ClueTrailItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.ClueTrailItem;
  return proto.SocialMonitor.ClueTrailItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.ClueTrailItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.ClueTrailItem}
 */
proto.SocialMonitor.ClueTrailItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.ClueTrailItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.ClueTrailItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.ClueTrailItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.ClueTrailItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPathId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeatures_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 camera_id = 1;
 * @return {number}
 */
proto.SocialMonitor.ClueTrailItem.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SocialMonitor.ClueTrailItem} returns this
 */
proto.SocialMonitor.ClueTrailItem.prototype.setCameraId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string path_id = 2;
 * @return {string}
 */
proto.SocialMonitor.ClueTrailItem.prototype.getPathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.ClueTrailItem} returns this
 */
proto.SocialMonitor.ClueTrailItem.prototype.setPathId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes features = 3;
 * @return {string}
 */
proto.SocialMonitor.ClueTrailItem.prototype.getFeatures = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes features = 3;
 * This is a type-conversion wrapper around `getFeatures()`
 * @return {string}
 */
proto.SocialMonitor.ClueTrailItem.prototype.getFeatures_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeatures()));
};


/**
 * optional bytes features = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeatures()`
 * @return {!Uint8Array}
 */
proto.SocialMonitor.ClueTrailItem.prototype.getFeatures_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeatures()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.SocialMonitor.ClueTrailItem} returns this
 */
proto.SocialMonitor.ClueTrailItem.prototype.setFeatures = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.ClueTrail.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.ClueTrail.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.ClueTrail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.ClueTrail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.ClueTrail.toObject = function(includeInstance, msg) {
  var f, obj = {
    clueId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clueName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pathsList: jspb.Message.toObjectList(msg.getPathsList(),
    proto.SocialMonitor.ClueTrailItem.toObject, includeInstance),
    trailUuid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.ClueTrail}
 */
proto.SocialMonitor.ClueTrail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.ClueTrail;
  return proto.SocialMonitor.ClueTrail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.ClueTrail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.ClueTrail}
 */
proto.SocialMonitor.ClueTrail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClueId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClueName(value);
      break;
    case 3:
      var value = new proto.SocialMonitor.ClueTrailItem;
      reader.readMessage(value,proto.SocialMonitor.ClueTrailItem.deserializeBinaryFromReader);
      msg.addPaths(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrailUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.ClueTrail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.ClueTrail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.ClueTrail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.ClueTrail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClueId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClueName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SocialMonitor.ClueTrailItem.serializeBinaryToWriter
    );
  }
  f = message.getTrailUuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string clue_id = 1;
 * @return {string}
 */
proto.SocialMonitor.ClueTrail.prototype.getClueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.ClueTrail} returns this
 */
proto.SocialMonitor.ClueTrail.prototype.setClueId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clue_name = 2;
 * @return {string}
 */
proto.SocialMonitor.ClueTrail.prototype.getClueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.ClueTrail} returns this
 */
proto.SocialMonitor.ClueTrail.prototype.setClueName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ClueTrailItem paths = 3;
 * @return {!Array<!proto.SocialMonitor.ClueTrailItem>}
 */
proto.SocialMonitor.ClueTrail.prototype.getPathsList = function() {
  return /** @type{!Array<!proto.SocialMonitor.ClueTrailItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SocialMonitor.ClueTrailItem, 3));
};


/**
 * @param {!Array<!proto.SocialMonitor.ClueTrailItem>} value
 * @return {!proto.SocialMonitor.ClueTrail} returns this
*/
proto.SocialMonitor.ClueTrail.prototype.setPathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SocialMonitor.ClueTrailItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.ClueTrailItem}
 */
proto.SocialMonitor.ClueTrail.prototype.addPaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SocialMonitor.ClueTrailItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.ClueTrail} returns this
 */
proto.SocialMonitor.ClueTrail.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};


/**
 * optional string trail_uuid = 4;
 * @return {string}
 */
proto.SocialMonitor.ClueTrail.prototype.getTrailUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.ClueTrail} returns this
 */
proto.SocialMonitor.ClueTrail.prototype.setTrailUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.PutCameraPointRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.PutCameraPointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.PutCameraPointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.PutCameraPointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutCameraPointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.SocialMonitor.CameraPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.PutCameraPointRequest}
 */
proto.SocialMonitor.PutCameraPointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.PutCameraPointRequest;
  return proto.SocialMonitor.PutCameraPointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.PutCameraPointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.PutCameraPointRequest}
 */
proto.SocialMonitor.PutCameraPointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SocialMonitor.CameraPoint;
      reader.readMessage(value,proto.SocialMonitor.CameraPoint.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.PutCameraPointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.PutCameraPointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.PutCameraPointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutCameraPointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SocialMonitor.CameraPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CameraPoint points = 1;
 * @return {!Array<!proto.SocialMonitor.CameraPoint>}
 */
proto.SocialMonitor.PutCameraPointRequest.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.SocialMonitor.CameraPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SocialMonitor.CameraPoint, 1));
};


/**
 * @param {!Array<!proto.SocialMonitor.CameraPoint>} value
 * @return {!proto.SocialMonitor.PutCameraPointRequest} returns this
*/
proto.SocialMonitor.PutCameraPointRequest.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SocialMonitor.CameraPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.CameraPoint}
 */
proto.SocialMonitor.PutCameraPointRequest.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SocialMonitor.CameraPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.PutCameraPointRequest} returns this
 */
proto.SocialMonitor.PutCameraPointRequest.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.PutCameraPointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.PutCameraPointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutCameraPointResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.PutCameraPointResponse}
 */
proto.SocialMonitor.PutCameraPointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.PutCameraPointResponse;
  return proto.SocialMonitor.PutCameraPointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.PutCameraPointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.PutCameraPointResponse}
 */
proto.SocialMonitor.PutCameraPointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.PutCameraPointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.PutCameraPointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutCameraPointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.PutCameraPointResponse} returns this
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.SocialMonitor.PutCameraPointResponse} returns this
*/
proto.SocialMonitor.PutCameraPointResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.PutCameraPointResponse} returns this
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.PutCameraPointResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.PutClueTrailRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.PutClueTrailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.PutClueTrailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.PutClueTrailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutClueTrailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    trailsList: jspb.Message.toObjectList(msg.getTrailsList(),
    proto.SocialMonitor.ClueTrail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.PutClueTrailRequest}
 */
proto.SocialMonitor.PutClueTrailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.PutClueTrailRequest;
  return proto.SocialMonitor.PutClueTrailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.PutClueTrailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.PutClueTrailRequest}
 */
proto.SocialMonitor.PutClueTrailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SocialMonitor.ClueTrail;
      reader.readMessage(value,proto.SocialMonitor.ClueTrail.deserializeBinaryFromReader);
      msg.addTrails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.PutClueTrailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.PutClueTrailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.PutClueTrailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutClueTrailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SocialMonitor.ClueTrail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClueTrail trails = 1;
 * @return {!Array<!proto.SocialMonitor.ClueTrail>}
 */
proto.SocialMonitor.PutClueTrailRequest.prototype.getTrailsList = function() {
  return /** @type{!Array<!proto.SocialMonitor.ClueTrail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SocialMonitor.ClueTrail, 1));
};


/**
 * @param {!Array<!proto.SocialMonitor.ClueTrail>} value
 * @return {!proto.SocialMonitor.PutClueTrailRequest} returns this
*/
proto.SocialMonitor.PutClueTrailRequest.prototype.setTrailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SocialMonitor.ClueTrail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.ClueTrail}
 */
proto.SocialMonitor.PutClueTrailRequest.prototype.addTrails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SocialMonitor.ClueTrail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.PutClueTrailRequest} returns this
 */
proto.SocialMonitor.PutClueTrailRequest.prototype.clearTrailsList = function() {
  return this.setTrailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.PutClueTrailResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.PutClueTrailResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutClueTrailResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.PutClueTrailResponse}
 */
proto.SocialMonitor.PutClueTrailResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.PutClueTrailResponse;
  return proto.SocialMonitor.PutClueTrailResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.PutClueTrailResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.PutClueTrailResponse}
 */
proto.SocialMonitor.PutClueTrailResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.PutClueTrailResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.PutClueTrailResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.PutClueTrailResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.PutClueTrailResponse} returns this
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.SocialMonitor.PutClueTrailResponse} returns this
*/
proto.SocialMonitor.PutClueTrailResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.PutClueTrailResponse} returns this
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.PutClueTrailResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.GetCameraPointRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.GetCameraPointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.GetCameraPointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.GetCameraPointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetCameraPointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.GetCameraPointRequest}
 */
proto.SocialMonitor.GetCameraPointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.GetCameraPointRequest;
  return proto.SocialMonitor.GetCameraPointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.GetCameraPointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.GetCameraPointRequest}
 */
proto.SocialMonitor.GetCameraPointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setCameraIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.GetCameraPointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.GetCameraPointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.GetCameraPointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetCameraPointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 camera_ids = 1;
 * @return {!Array<number>}
 */
proto.SocialMonitor.GetCameraPointRequest.prototype.getCameraIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SocialMonitor.GetCameraPointRequest} returns this
 */
proto.SocialMonitor.GetCameraPointRequest.prototype.setCameraIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.GetCameraPointRequest} returns this
 */
proto.SocialMonitor.GetCameraPointRequest.prototype.addCameraIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.GetCameraPointRequest} returns this
 */
proto.SocialMonitor.GetCameraPointRequest.prototype.clearCameraIdsList = function() {
  return this.setCameraIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.GetCameraPointResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.GetCameraPointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.GetCameraPointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetCameraPointResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.SocialMonitor.CameraPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.GetCameraPointResponse}
 */
proto.SocialMonitor.GetCameraPointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.GetCameraPointResponse;
  return proto.SocialMonitor.GetCameraPointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.GetCameraPointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.GetCameraPointResponse}
 */
proto.SocialMonitor.GetCameraPointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.SocialMonitor.CameraPoint;
      reader.readMessage(value,proto.SocialMonitor.CameraPoint.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.GetCameraPointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.GetCameraPointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetCameraPointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SocialMonitor.CameraPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.GetCameraPointResponse} returns this
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.SocialMonitor.GetCameraPointResponse} returns this
*/
proto.SocialMonitor.GetCameraPointResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.GetCameraPointResponse} returns this
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CameraPoint points = 3;
 * @return {!Array<!proto.SocialMonitor.CameraPoint>}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.SocialMonitor.CameraPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SocialMonitor.CameraPoint, 3));
};


/**
 * @param {!Array<!proto.SocialMonitor.CameraPoint>} value
 * @return {!proto.SocialMonitor.GetCameraPointResponse} returns this
*/
proto.SocialMonitor.GetCameraPointResponse.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SocialMonitor.CameraPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.CameraPoint}
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SocialMonitor.CameraPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.GetCameraPointResponse} returns this
 */
proto.SocialMonitor.GetCameraPointResponse.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.GetClueTrailRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.GetClueTrailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.GetClueTrailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.GetClueTrailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetClueTrailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clueNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.GetClueTrailRequest}
 */
proto.SocialMonitor.GetClueTrailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.GetClueTrailRequest;
  return proto.SocialMonitor.GetClueTrailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.GetClueTrailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.GetClueTrailRequest}
 */
proto.SocialMonitor.GetClueTrailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addClueNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.GetClueTrailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.GetClueTrailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.GetClueTrailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetClueTrailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClueNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string clue_names = 1;
 * @return {!Array<string>}
 */
proto.SocialMonitor.GetClueTrailRequest.prototype.getClueNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SocialMonitor.GetClueTrailRequest} returns this
 */
proto.SocialMonitor.GetClueTrailRequest.prototype.setClueNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.GetClueTrailRequest} returns this
 */
proto.SocialMonitor.GetClueTrailRequest.prototype.addClueNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.GetClueTrailRequest} returns this
 */
proto.SocialMonitor.GetClueTrailRequest.prototype.clearClueNamesList = function() {
  return this.setClueNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SocialMonitor.GetClueTrailResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SocialMonitor.GetClueTrailResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SocialMonitor.GetClueTrailResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetClueTrailResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f),
    cluesList: jspb.Message.toObjectList(msg.getCluesList(),
    proto.SocialMonitor.ClueTrail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SocialMonitor.GetClueTrailResponse}
 */
proto.SocialMonitor.GetClueTrailResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SocialMonitor.GetClueTrailResponse;
  return proto.SocialMonitor.GetClueTrailResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SocialMonitor.GetClueTrailResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SocialMonitor.GetClueTrailResponse}
 */
proto.SocialMonitor.GetClueTrailResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.SocialMonitor.ClueTrail;
      reader.readMessage(value,proto.SocialMonitor.ClueTrail.deserializeBinaryFromReader);
      msg.addClues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SocialMonitor.GetClueTrailResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SocialMonitor.GetClueTrailResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SocialMonitor.GetClueTrailResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getCluesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SocialMonitor.ClueTrail.serializeBinaryToWriter
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SocialMonitor.GetClueTrailResponse} returns this
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Common.Error error = 2;
 * @return {?proto.Common.Error}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.getError = function() {
  return /** @type{?proto.Common.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Common.Error|undefined} value
 * @return {!proto.SocialMonitor.GetClueTrailResponse} returns this
*/
proto.SocialMonitor.GetClueTrailResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SocialMonitor.GetClueTrailResponse} returns this
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ClueTrail clues = 3;
 * @return {!Array<!proto.SocialMonitor.ClueTrail>}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.getCluesList = function() {
  return /** @type{!Array<!proto.SocialMonitor.ClueTrail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SocialMonitor.ClueTrail, 3));
};


/**
 * @param {!Array<!proto.SocialMonitor.ClueTrail>} value
 * @return {!proto.SocialMonitor.GetClueTrailResponse} returns this
*/
proto.SocialMonitor.GetClueTrailResponse.prototype.setCluesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SocialMonitor.ClueTrail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SocialMonitor.ClueTrail}
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.addClues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SocialMonitor.ClueTrail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SocialMonitor.GetClueTrailResponse} returns this
 */
proto.SocialMonitor.GetClueTrailResponse.prototype.clearCluesList = function() {
  return this.setCluesList([]);
};


goog.object.extend(exports, proto.SocialMonitor);
